{"version":3,"file":"userService.js","sources":["utils/userService.js"],"sourcesContent":["/**\n * 用户服务模块\n * 提供用户登录、注册、信息管理等业务功能\n */\nimport {\n  saveUserToStorage,\n  getUserFromStorage,\n  clearUserStorage,\n} from \"./api/authApi\";\nimport {\n  createDefaultUserInfo,\n  validateUserInfo,\n  mergeWithDefaultUserInfo,\n} from \"./userModel\";\nimport { userState, updateUserState, resetUserState } from \"./userState\";\nimport { post, get } from \"./api/request\"; // 导入请求方法\nimport { API_PATHS } from \"./api/config\"; // 导入API路径配置\n\n/**\n * 生成唯一用户ID\n * @returns {String} 唯一ID\n */\nconst generateUserId = () => {\n  return \"user_\" + Date.now() + \"_\" + Math.floor(Math.random() * 1000000);\n};\n\n/**\n * 用户注册\n * @param {Object} userInfo - 用户注册信息\n * @returns {Object} 包含成功状态和用户信息的对象\n */\nexport const registerUser = (userInfo = {}) => {\n  try {\n    // 验证必要字段\n    if (!userInfo.phone) {\n      return { success: false, message: \"手机号不能为空\" };\n    }\n\n    // 创建用户信息\n    const userId = generateUserId();\n    const newUser = mergeWithDefaultUserInfo({\n      ...userInfo,\n      userId,\n      createTime: Date.now(),\n      lastLoginTime: Date.now(),\n    });\n\n    // 只保存用户ID到本地\n    const saved = saveUserToStorage({ userId: newUser.userId }, \"\");\n    if (!saved) {\n      return { success: false, message: \"用户ID保存失败\" };\n    }\n\n    // 更新全局用户状态\n    updateUserState(newUser);\n\n    return { success: true, userInfo: newUser };\n  } catch (error) {\n    return { success: false, message: \"注册过程中发生错误\" };\n  }\n};\n\n/**\n * 用户登录\n * @param {String} phone - 手机号\n * @param {String} code - 验证码（本地模拟，实际应使用服务端验证）\n * @returns {Object} 包含成功状态和用户信息的对象\n */\nexport const loginUser = (phone, code = \"000000\") => {\n  try {\n    // 模拟登录验证\n    if (!phone) {\n      return { success: false, message: \"手机号不能为空\" };\n    }\n\n    // 本地验证码固定为000000（实际应使用服务端验证）\n    if (code !== \"000000\" && !phone.startsWith(\"guest_\")) {\n      return { success: false, message: \"验证码错误\" };\n    }\n\n    // 获取已存储的用户信息\n    let userInfo = getUserFromStorage();\n\n    // 如果用户不存在，创建新用户\n    if (!userInfo || !userInfo.userId) {\n      return registerUser({ phone });\n    }\n\n    // 登录成功，使用后台获取的用户信息\n    // 这里应该调用后端API获取完整用户信息\n\n    // 更新全局用户状态 - 只更新用户ID\n    updateUserState({ userId: userInfo.userId });\n\n    return { success: true, userInfo };\n  } catch (error) {\n    return { success: false, message: \"登录过程中发生错误\" };\n  }\n};\n\n/**\n * 用户登出\n * @returns {Boolean} 是否成功登出\n */\nexport const logoutUser = () => {\n  const cleared = clearUserStorage();\n\n  // 重置全局用户状态\n  if (cleared) {\n    resetUserState();\n  }\n\n  return cleared;\n};\n\n/**\n * 更新用户个人资料\n * @param {Object} profileInfo - 要更新的个人资料\n * @returns {Object} 包含成功状态和用户信息的对象\n */\nexport const updateUserProfile = (profileInfo) => {\n  try {\n    if (!profileInfo || typeof profileInfo !== \"object\") {\n      return { success: false, message: \"无效的个人资料\" };\n    }\n\n    // 获取当前用户信息\n    const currentUser = getUserFromStorage();\n    if (!currentUser || !currentUser.userId) {\n      return { success: false, message: \"用户未登录\" };\n    }\n\n    // 更新个人资料（仅允许更新特定字段）\n    const allowedFields = [\"nickname\", \"avatar\", \"gender\", \"birthday\"];\n    const updateFields = {};\n\n    allowedFields.forEach((field) => {\n      if (profileInfo[field] !== undefined) {\n        updateFields[field] = profileInfo[field];\n      }\n    });\n\n    // 这里应该调用后端API更新用户信息\n    // ...\n\n    // 更新全局用户状态\n    updateUserState(updateFields);\n\n    return { success: true, userInfo: { ...currentUser, ...updateFields } };\n  } catch (error) {\n    return { success: false, message: \"更新过程中发生错误\" };\n  }\n};\n\n/**\n * 添加熊猫币\n * @param {Number} amount - 要添加的熊猫币数量\n * @returns {Object} 包含成功状态和更新后用户信息的对象\n */\nexport const addPandaCoins = (amount) => {\n  try {\n    if (typeof amount !== \"number\" || amount <= 0) {\n      return { success: false, message: \"无效的熊猫币数量\" };\n    }\n\n    // 获取当前用户信息\n    const currentUser = getUserFromStorage();\n    if (!currentUser || !currentUser.userId) {\n      return { success: false, message: \"用户未登录\" };\n    }\n\n    // 这里应该调用后端API更新熊猫币\n    // ...\n\n    // 计算新的熊猫币数量\n    const newCoins = (userState.pandaCoins || 0) + amount;\n\n    // 更新全局用户状态\n    updateUserState({ pandaCoins: newCoins });\n\n    return {\n      success: true,\n      userInfo: {\n        ...currentUser,\n        pandaCoins: newCoins,\n      },\n    };\n  } catch (error) {\n    return { success: false, message: \"操作过程中发生错误\" };\n  }\n};\n\n/**\n * 上传用户背景图片\n * @param {Object} options - 上传选项\n * @param {String} options.filePath - 本地文件路径\n * @param {String} options.userId - 用户ID\n * @returns {Promise} 包含上传结果的Promise\n *\n * 注意：后端应返回完整的URL（带http前缀），如：http://localhost:8082/uploads/post-background/image.jpg\n */\nexport const uploadBackgroundImage = (options) => {\n  return new Promise((resolve, reject) => {\n    if (!options || !options.filePath) {\n      reject(new Error(\"文件路径不能为空\"));\n      return;\n    }\n\n    const currentUser = getUserFromStorage();\n    if (!currentUser || !currentUser.userId) {\n      reject(new Error(\"用户未登录\"));\n      return;\n    }\n\n    const userId = options.userId || currentUser.userId;\n\n    // 使用uni.uploadFile上传文件\n    uni.uploadFile({\n      url: \"/api/user/upload-background\", // 上传背景图片的API端点\n      filePath: options.filePath,\n      name: \"backgroundFile\",\n      formData: {\n        userId: userId,\n      },\n      success: (uploadRes) => {\n        try {\n          // 解析响应数据\n          const result = JSON.parse(uploadRes.data);\n\n          if (result.code === 200 && result.data && result.data.backgroundUrl) {\n            // 检查返回的URL格式\n            const backgroundUrl = result.data.backgroundUrl;\n\n            // 上传成功后，更新背景URL\n            updateUserState({ backgroundImage: backgroundUrl });\n            resolve(result);\n          } else {\n            reject(new Error(result.message || \"上传失败\"));\n          }\n        } catch (parseError) {\n          reject(new Error(\"解析响应数据失败\"));\n        }\n      },\n      fail: (err) => {\n        reject(err);\n      },\n    });\n  });\n};\n\n/**\n * 更新用户背景图片URL\n * @param {String} backgroundUrl - 完整的背景图片URL\n * @param {String} userId - 用户ID\n * @returns {Promise<Object>} 更新结果\n */\nexport const updateBackgroundUrl = async (backgroundUrl, userId) => {\n  try {\n    // 构建请求数据\n    const requestData = {\n      userId: userId,\n      backgroundImage: backgroundUrl, // 使用完整URL\n    };\n\n    // 发送更新请求\n    const response = await post(\"/api/user/update-background\", requestData);\n\n    if (\n      response &&\n      (response.code === 200 || (response.data && response.data.code === 200))\n    ) {\n      return {\n        success: true,\n        data: response.data || response,\n      };\n    } else {\n      return {\n        success: false,\n        message: (response && response.message) || \"更新背景URL失败\",\n      };\n    }\n  } catch (error) {\n    return {\n      success: false,\n      message: error.message || \"网络错误，请稍后再试\",\n    };\n  }\n};\n\n/**\n * 更新用户简介\n * @param {String} bio - 新的用户简介\n * @param {String} userId - 用户ID(可选，默认为当前用户)\n * @returns {Promise} 包含更新结果的Promise\n */\nexport const updateUserBio = async (bio, userId) => {\n  try {\n    // 获取当前用户信息\n    const currentUser = getUserFromStorage();\n    if (!currentUser || !currentUser.userId) {\n      return { success: false, message: \"用户未登录\" };\n    }\n\n    const targetUserId = userId || currentUser.userId;\n\n    // 调用API更新用户简介\n    const response = await post(\"/api/user/update-bio\", {\n      userId: targetUserId,\n      bio: bio,\n    });\n\n    if (response && response.code === 200) {\n      // 更新全局用户状态\n      updateUserState({ bio: bio });\n\n      return {\n        success: true,\n        message: \"简介更新成功\",\n        data: { bio },\n      };\n    } else {\n      return {\n        success: false,\n        message: response?.message || \"简介更新失败\",\n      };\n    }\n  } catch (error) {\n    return { success: false, message: \"更新简介过程中发生错误\" };\n  }\n};\n"],"names":["mergeWithDefaultUserInfo","saveUserToStorage","updateUserState","getUserFromStorage","post"],"mappings":";;;;;;AAsBA,MAAM,iBAAiB,MAAM;AAC3B,SAAO,UAAU,KAAK,IAAG,IAAK,MAAM,KAAK,MAAM,KAAK,OAAQ,IAAG,GAAO;AACxE;AAOO,MAAM,eAAe,CAAC,WAAW,OAAO;AAC7C,MAAI;AAEF,QAAI,CAAC,SAAS,OAAO;AACnB,aAAO,EAAE,SAAS,OAAO,SAAS,UAAS;AAAA,IAC5C;AAGD,UAAM,SAAS;AACf,UAAM,UAAUA,gBAAAA,yBAAyB;AAAA,MACvC,GAAG;AAAA,MACH;AAAA,MACA,YAAY,KAAK,IAAK;AAAA,MACtB,eAAe,KAAK,IAAK;AAAA,IAC/B,CAAK;AAGD,UAAM,QAAQC,kBAAAA,kBAAkB,EAAE,QAAQ,QAAQ,OAAM,GAAI,EAAE;AAC9D,QAAI,CAAC,OAAO;AACV,aAAO,EAAE,SAAS,OAAO,SAAS,WAAU;AAAA,IAC7C;AAGDC,oBAAe,gBAAC,OAAO;AAEvB,WAAO,EAAE,SAAS,MAAM,UAAU,QAAO;AAAA,EAC1C,SAAQ,OAAO;AACd,WAAO,EAAE,SAAS,OAAO,SAAS,YAAW;AAAA,EAC9C;AACH;AAQY,MAAC,YAAY,CAAC,OAAO,OAAO,aAAa;AACnD,MAAI;AAEF,QAAI,CAAC,OAAO;AACV,aAAO,EAAE,SAAS,OAAO,SAAS,UAAS;AAAA,IAC5C;AAGD,QAAI,SAAS,YAAY,CAAC,MAAM,WAAW,QAAQ,GAAG;AACpD,aAAO,EAAE,SAAS,OAAO,SAAS,QAAO;AAAA,IAC1C;AAGD,QAAI,WAAWC,kBAAAA;AAGf,QAAI,CAAC,YAAY,CAAC,SAAS,QAAQ;AACjC,aAAO,aAAa,EAAE,MAAK,CAAE;AAAA,IAC9B;AAMDD,oBAAAA,gBAAgB,EAAE,QAAQ,SAAS,OAAQ,CAAA;AAE3C,WAAO,EAAE,SAAS,MAAM;EACzB,SAAQ,OAAO;AACd,WAAO,EAAE,SAAS,OAAO,SAAS,YAAW;AAAA,EAC9C;AACH;AAqMY,MAAC,gBAAgB,OAAO,KAAK,WAAW;AAClD,MAAI;AAEF,UAAM,cAAcC,kBAAAA;AACpB,QAAI,CAAC,eAAe,CAAC,YAAY,QAAQ;AACvC,aAAO,EAAE,SAAS,OAAO,SAAS,QAAO;AAAA,IAC1C;AAED,UAAM,eAAe,UAAU,YAAY;AAG3C,UAAM,WAAW,MAAMC,kBAAI,KAAC,wBAAwB;AAAA,MAClD,QAAQ;AAAA,MACR;AAAA,IACN,CAAK;AAED,QAAI,YAAY,SAAS,SAAS,KAAK;AAErCF,sBAAAA,gBAAgB,EAAE,IAAQ,CAAE;AAE5B,aAAO;AAAA,QACL,SAAS;AAAA,QACT,SAAS;AAAA,QACT,MAAM,EAAE,IAAK;AAAA,MACrB;AAAA,IACA,OAAW;AACL,aAAO;AAAA,QACL,SAAS;AAAA,QACT,UAAS,qCAAU,YAAW;AAAA,MACtC;AAAA,IACK;AAAA,EACF,SAAQ,OAAO;AACd,WAAO,EAAE,SAAS,OAAO,SAAS,cAAa;AAAA,EAChD;AACH;;;"}