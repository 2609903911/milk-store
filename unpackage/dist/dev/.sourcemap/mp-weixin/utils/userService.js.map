{"version":3,"file":"userService.js","sources":["utils/userService.js"],"sourcesContent":["/**\r\n * 用户服务模块\r\n * 提供用户登录、注册、信息管理等业务功能\r\n */\r\nimport { saveUserInfo, getUserInfo, updateUserInfo, clearUserInfo } from './userStorage';\r\nimport { createDefaultUserInfo, validateUserInfo, mergeWithDefaultUserInfo } from './userModel';\r\nimport { userState, updateUserState, resetUserState } from './userState';\r\n\r\n/**\r\n * 生成唯一用户ID\r\n * @returns {String} 唯一ID\r\n */\r\nconst generateUserId = () => {\r\n  return 'user_' + Date.now() + '_' + Math.floor(Math.random() * 1000000);\r\n};\r\n\r\n/**\r\n * 用户注册\r\n * @param {Object} userInfo - 用户注册信息\r\n * @returns {Object} 包含成功状态和用户信息的对象\r\n */\r\nexport const registerUser = (userInfo = {}) => {\r\n  try {\r\n    // 验证必要字段\r\n    if (!userInfo.phone) {\r\n      return { success: false, message: '手机号不能为空' };\r\n    }\r\n    \r\n    // 创建用户信息\r\n    const userId = generateUserId();\r\n    const newUser = mergeWithDefaultUserInfo({\r\n      ...userInfo,\r\n      userId,\r\n      createTime: Date.now(),\r\n      lastLoginTime: Date.now()\r\n    });\r\n    \r\n    // 保存用户信息\r\n    const saved = saveUserInfo(newUser);\r\n    if (!saved) {\r\n      return { success: false, message: '用户信息保存失败' };\r\n    }\r\n    \r\n    // 更新全局用户状态\r\n    updateUserState(newUser);\r\n    \r\n    return { success: true, userInfo: newUser };\r\n  } catch (error) {\r\n    console.error('用户注册失败', error);\r\n    return { success: false, message: '注册过程中发生错误' };\r\n  }\r\n};\r\n\r\n/**\r\n * 用户登录\r\n * @param {String} phone - 手机号\r\n * @param {String} code - 验证码（本地模拟，实际应使用服务端验证）\r\n * @returns {Object} 包含成功状态和用户信息的对象\r\n */\r\nexport const loginUser = (phone, code = '000000') => {\r\n  try {\r\n    // 模拟登录验证\r\n    if (!phone) {\r\n      return { success: false, message: '手机号不能为空' };\r\n    }\r\n    \r\n    // 本地验证码固定为000000（实际应使用服务端验证）\r\n    if (code !== '000000' && !phone.startsWith('guest_')) {\r\n      return { success: false, message: '验证码错误' };\r\n    }\r\n    \r\n    // 获取已存储的用户信息\r\n    let userInfo = getUserInfo();\r\n    \r\n    // 如果用户不存在，创建新用户\r\n    if (!userInfo) {\r\n      return registerUser({ phone });\r\n    }\r\n    \r\n    // 更新登录时间\r\n    userInfo.lastLoginTime = Date.now();\r\n    const updated = updateUserInfo(userInfo);\r\n    \r\n    if (!updated) {\r\n      return { success: false, message: '更新登录信息失败' };\r\n    }\r\n    \r\n    // 更新全局用户状态\r\n    updateUserState(userInfo);\r\n    \r\n    return { success: true, userInfo };\r\n  } catch (error) {\r\n    console.error('用户登录失败', error);\r\n    return { success: false, message: '登录过程中发生错误' };\r\n  }\r\n};\r\n\r\n/**\r\n * 用户登出\r\n * @returns {Boolean} 是否成功登出\r\n */\r\nexport const logoutUser = () => {\r\n  const cleared = clearUserInfo();\r\n  \r\n  // 重置全局用户状态\r\n  if (cleared) {\r\n    resetUserState();\r\n  }\r\n  \r\n  return cleared;\r\n};\r\n\r\n/**\r\n * 更新用户个人资料\r\n * @param {Object} profileInfo - 要更新的个人资料\r\n * @returns {Object} 包含成功状态和用户信息的对象\r\n */\r\nexport const updateUserProfile = (profileInfo) => {\r\n  try {\r\n    if (!profileInfo || typeof profileInfo !== 'object') {\r\n      return { success: false, message: '无效的个人资料' };\r\n    }\r\n    \r\n    // 获取当前用户信息\r\n    const currentUser = getUserInfo();\r\n    if (!currentUser) {\r\n      return { success: false, message: '用户未登录' };\r\n    }\r\n    \r\n    // 更新个人资料（仅允许更新特定字段）\r\n    const allowedFields = ['nickname', 'avatar', 'gender', 'birthday'];\r\n    const updateFields = {};\r\n    \r\n    allowedFields.forEach(field => {\r\n      if (profileInfo[field] !== undefined) {\r\n        updateFields[field] = profileInfo[field];\r\n      }\r\n    });\r\n    \r\n    // 保存更新后的用户信息\r\n    const updated = updateUserInfo(updateFields);\r\n    if (!updated) {\r\n      return { success: false, message: '更新个人资料失败' };\r\n    }\r\n    \r\n    // 更新全局用户状态\r\n    updateUserState(updateFields);\r\n    \r\n    // 获取更新后的用户信息\r\n    const updatedUser = getUserInfo();\r\n    return { success: true, userInfo: updatedUser };\r\n  } catch (error) {\r\n    console.error('更新个人资料失败', error);\r\n    return { success: false, message: '更新过程中发生错误' };\r\n  }\r\n};\r\n\r\n/**\r\n * 添加熊猫币\r\n * @param {Number} amount - 要添加的熊猫币数量\r\n * @returns {Object} 包含成功状态和更新后用户信息的对象\r\n */\r\nexport const addPandaCoins = (amount) => {\r\n  try {\r\n    if (typeof amount !== 'number' || amount <= 0) {\r\n      return { success: false, message: '无效的熊猫币数量' };\r\n    }\r\n    \r\n    // 获取当前用户信息\r\n    const currentUser = getUserInfo();\r\n    if (!currentUser) {\r\n      return { success: false, message: '用户未登录' };\r\n    }\r\n    \r\n    // 计算新的熊猫币数量\r\n    const newCoins = (currentUser.pandaCoins || 0) + amount;\r\n    \r\n    // 更新熊猫币\r\n    const updated = updateUserInfo({ pandaCoins: newCoins });\r\n    if (!updated) {\r\n      return { success: false, message: '更新熊猫币失败' };\r\n    }\r\n    \r\n    // 更新全局用户状态\r\n    updateUserState({ pandaCoins: newCoins });\r\n    \r\n    // 获取更新后的用户信息\r\n    const updatedUser = getUserInfo();\r\n    return { success: true, userInfo: updatedUser };\r\n  } catch (error) {\r\n    console.error('添加熊猫币失败', error);\r\n    return { success: false, message: '操作过程中发生错误' };\r\n  }\r\n}; "],"names":["mergeWithDefaultUserInfo","saveUserInfo","updateUserState","uni","getUserInfo","updateUserInfo"],"mappings":";;;;;AAYA,MAAM,iBAAiB,MAAM;AAC3B,SAAO,UAAU,KAAK,IAAG,IAAK,MAAM,KAAK,MAAM,KAAK,OAAQ,IAAG,GAAO;AACxE;AAOO,MAAM,eAAe,CAAC,WAAW,OAAO;AAC7C,MAAI;AAEF,QAAI,CAAC,SAAS,OAAO;AACnB,aAAO,EAAE,SAAS,OAAO,SAAS,UAAS;AAAA,IAC5C;AAGD,UAAM,SAAS;AACf,UAAM,UAAUA,gBAAAA,yBAAyB;AAAA,MACvC,GAAG;AAAA,MACH;AAAA,MACA,YAAY,KAAK,IAAK;AAAA,MACtB,eAAe,KAAK,IAAK;AAAA,IAC/B,CAAK;AAGD,UAAM,QAAQC,+BAAa,OAAO;AAClC,QAAI,CAAC,OAAO;AACV,aAAO,EAAE,SAAS,OAAO,SAAS,WAAU;AAAA,IAC7C;AAGDC,oBAAe,gBAAC,OAAO;AAEvB,WAAO,EAAE,SAAS,MAAM,UAAU,QAAO;AAAA,EAC1C,SAAQ,OAAO;AACdC,kBAAA,MAAA,MAAA,SAAA,8BAAc,UAAU,KAAK;AAC7B,WAAO,EAAE,SAAS,OAAO,SAAS,YAAW;AAAA,EAC9C;AACH;AAQY,MAAC,YAAY,CAAC,OAAO,OAAO,aAAa;AACnD,MAAI;AAEF,QAAI,CAAC,OAAO;AACV,aAAO,EAAE,SAAS,OAAO,SAAS,UAAS;AAAA,IAC5C;AAGD,QAAI,SAAS,YAAY,CAAC,MAAM,WAAW,QAAQ,GAAG;AACpD,aAAO,EAAE,SAAS,OAAO,SAAS,QAAO;AAAA,IAC1C;AAGD,QAAI,WAAWC,kBAAAA;AAGf,QAAI,CAAC,UAAU;AACb,aAAO,aAAa,EAAE,MAAK,CAAE;AAAA,IAC9B;AAGD,aAAS,gBAAgB,KAAK;AAC9B,UAAM,UAAUC,iCAAe,QAAQ;AAEvC,QAAI,CAAC,SAAS;AACZ,aAAO,EAAE,SAAS,OAAO,SAAS,WAAU;AAAA,IAC7C;AAGDH,oBAAe,gBAAC,QAAQ;AAExB,WAAO,EAAE,SAAS,MAAM;EACzB,SAAQ,OAAO;AACdC,kBAAA,MAAA,MAAA,SAAA,8BAAc,UAAU,KAAK;AAC7B,WAAO,EAAE,SAAS,OAAO,SAAS,YAAW;AAAA,EAC9C;AACH;;"}