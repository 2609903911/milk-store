{"version":3,"file":"request.js","sources":["utils/request.js"],"sourcesContent":["/**\r\n * 统一请求工具\r\n */\r\n\r\n// API基础URL配置\r\nconst BASE_URL = 'http://localhost:8082'; // 开发环境\r\n// const BASE_URL = ''; // 生产环境，根据实际部署情况配置\r\n\r\n/**\r\n * 发送请求的统一方法\r\n * @param {Object} options - 请求配置\r\n * @returns {Promise} 请求结果的Promise\r\n */\r\nexport const request = (options) => {\r\n    return new Promise((resolve, reject) => {\r\n        // 构建完整URL\r\n        const url = options.url.startsWith('http') \r\n            ? options.url \r\n            : `${BASE_URL}${options.url}`;\r\n        \r\n        // 显示加载中提示\r\n        if (options.loading !== false) {\r\n            uni.showLoading({\r\n                title: options.loadingText || '加载中',\r\n                mask: true\r\n            });\r\n        }\r\n        \r\n        // 准备请求头\r\n        const header = {\r\n            'Content-Type': 'application/json',\r\n            ...options.header // 合并自定义请求头\r\n        };\r\n        \r\n        // 本地开发环境下，使用XMLHttpRequest模式进行请求\r\n        if (process.env.NODE_ENV === 'development') {\r\n            console.log('发送请求:', url, options.method, options.data);\r\n            \r\n            try {\r\n                // 创建XHR对象\r\n                const xhr = new XMLHttpRequest();\r\n                xhr.open(options.method || 'GET', url, true);\r\n                \r\n                // 设置请求头\r\n                for (const key in header) {\r\n                    xhr.setRequestHeader(key, header[key]);\r\n                }\r\n                \r\n                // 设置超时时间\r\n                xhr.timeout = options.timeout || 60000;\r\n                \r\n                // 处理响应\r\n                xhr.onload = function() {\r\n                    if (options.loading !== false) {\r\n                        uni.hideLoading();\r\n                    }\r\n                    \r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        let response;\r\n                        try {\r\n                            response = JSON.parse(xhr.responseText);\r\n                        } catch (e) {\r\n                            response = xhr.responseText;\r\n                        }\r\n                        console.log('请求成功:', response);\r\n                        resolve({ data: response, statusCode: xhr.status });\r\n                    } else {\r\n                        console.error('请求失败:', xhr.status, xhr.statusText);\r\n                        if (options.showError !== false) {\r\n                            uni.showToast({\r\n                                title: `请求失败(${xhr.status})`,\r\n                                icon: 'none'\r\n                            });\r\n                        }\r\n                        reject({ code: xhr.status, message: xhr.statusText });\r\n                    }\r\n                };\r\n                \r\n                // 处理错误\r\n                xhr.onerror = function(e) {\r\n                    if (options.loading !== false) {\r\n                        uni.hideLoading();\r\n                    }\r\n                    console.error('请求错误:', e);\r\n                    if (options.showError !== false) {\r\n                        uni.showToast({\r\n                            title: '网络异常，请稍后再试',\r\n                            icon: 'none'\r\n                        });\r\n                    }\r\n                    reject({ message: '网络异常' });\r\n                };\r\n                \r\n                // 处理超时\r\n                xhr.ontimeout = function() {\r\n                    if (options.loading !== false) {\r\n                        uni.hideLoading();\r\n                    }\r\n                    if (options.showError !== false) {\r\n                        uni.showToast({\r\n                            title: '请求超时',\r\n                            icon: 'none'\r\n                        });\r\n                    }\r\n                    reject({ message: '请求超时' });\r\n                };\r\n                \r\n                // 发送请求\r\n                if (options.method === 'GET' || !options.data) {\r\n                    xhr.send();\r\n                } else {\r\n                    xhr.send(JSON.stringify(options.data));\r\n                }\r\n                \r\n                return;\r\n            } catch (e) {\r\n                console.error('XHR初始化失败，回退到uni.request:', e);\r\n                // 如果XHR模式失败，回退到uni.request\r\n            }\r\n        }\r\n        \r\n        // 使用uni.request\r\n        uni.request({\r\n            url,\r\n            method: options.method || 'GET',\r\n            data: options.data,\r\n            header,\r\n            withCredentials: false, // 跨域请求不发送cookie\r\n            success: (res) => {\r\n                console.log('请求成功:', res);\r\n                // 请求成功，但需检查业务状态码\r\n                if (res.statusCode === 200) {\r\n                    // 如果返回直接是数据对象，则直接使用\r\n                    if (typeof res.data === 'object' && res.data !== null) {\r\n                        resolve(res);\r\n                    } \r\n                    // 业务状态码检查\r\n                    else if (res.data && res.data.code === 200) {\r\n                        resolve(res.data);\r\n                    } else {\r\n                        // 业务错误处理\r\n                        const errorMsg = res.data?.msg || '请求失败';\r\n                        if (options.showError !== false) {\r\n                            uni.showToast({\r\n                                title: errorMsg,\r\n                                icon: 'none'\r\n                            });\r\n                        }\r\n                        reject({ code: res.data?.code, message: errorMsg });\r\n                    }\r\n                } else {\r\n                    // HTTP状态码错误处理\r\n                    const errorMsg = `请求失败(${res.statusCode})`;\r\n                    if (options.showError !== false) {\r\n                        uni.showToast({\r\n                            title: errorMsg,\r\n                            icon: 'none'\r\n                        });\r\n                    }\r\n                    reject({ code: res.statusCode, message: errorMsg });\r\n                }\r\n            },\r\n            fail: (err) => {\r\n                console.error('请求失败详情:', err);\r\n                // 网络错误或其他错误\r\n                const errorMsg = err.errMsg || '网络异常，请稍后再试';\r\n                if (options.showError !== false) {\r\n                    uni.showToast({\r\n                        title: errorMsg,\r\n                        icon: 'none'\r\n                    });\r\n                }\r\n                reject(err);\r\n            },\r\n            complete: () => {\r\n                // 隐藏加载提示\r\n                if (options.loading !== false) {\r\n                    uni.hideLoading();\r\n                }\r\n                \r\n                // 自定义完成回调\r\n                if (typeof options.complete === 'function') {\r\n                    options.complete();\r\n                }\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * GET请求\r\n * @param {String} url - 请求URL\r\n * @param {Object} data - 请求参数\r\n * @param {Object} options - 其他选项\r\n * @returns {Promise} 请求结果\r\n */\r\nexport const get = (url, data = {}, options = {}) => {\r\n    return request({\r\n        ...options,\r\n        url,\r\n        method: 'GET',\r\n        data\r\n    });\r\n};\r\n\r\n/**\r\n * POST请求\r\n * @param {String} url - 请求URL\r\n * @param {Object} data - 请求参数\r\n * @param {Object} options - 其他选项\r\n * @returns {Promise} 请求结果\r\n */\r\nexport const post = (url, data = {}, options = {}) => {\r\n    return request({\r\n        ...options,\r\n        url,\r\n        method: 'POST',\r\n        data\r\n    });\r\n};\r\n\r\n/**\r\n * 获取完整的API URL\r\n * @param {String} path - API路径\r\n * @returns {String} 完整URL\r\n */\r\nexport const getFullUrl = (path) => {\r\n    return `${BASE_URL}${path}`;\r\n};\r\n\r\nexport default {\r\n    request,\r\n    get,\r\n    post,\r\n    getFullUrl,\r\n    BASE_URL\r\n}; "],"names":["uni"],"mappings":"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"}