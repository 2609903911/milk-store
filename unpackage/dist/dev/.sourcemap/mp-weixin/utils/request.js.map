{"version":3,"file":"request.js","sources":["utils/request.js"],"sourcesContent":["/**\n * 统一请求工具\n */\n\n// API基础URL配置\nconst BASE_URL =\n  process.env.NODE_ENV === \"development\"\n    ? \"http://localhost:8082\" // 开发环境\n    : \"https://api.milkstore.com\"; // 生产环境\n\n// 请求超时时间\nconst TIMEOUT = 10000;\n\n/**\n * 检查当前环境是否支持XMLHttpRequest\n * @returns {boolean} 是否支持XMLHttpRequest\n */\nconst isXHRSupported = () => {\n  try {\n    // 检查是否在小程序环境\n    const isMiniProgram =\n      typeof uni !== \"undefined\" &&\n      !!uni.getSystemInfoSync &&\n      (typeof window === \"undefined\" || !window.XMLHttpRequest);\n\n    // 如果是小程序环境或XMLHttpRequest不存在则返回false\n    if (isMiniProgram) {\n      return false;\n    }\n\n    // 检查XMLHttpRequest是否存在且可用\n    return typeof XMLHttpRequest === \"function\";\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * 发送请求的统一方法\n * @param {Object} options - 请求配置\n * @returns {Promise} 请求结果的Promise\n */\nexport const request = (options) => {\n  return new Promise((resolve, reject) => {\n    // 构建完整URL\n    const url = options.url.startsWith(\"http\")\n      ? options.url\n      : BASE_URL + options.url;\n\n    // 显示加载中提示\n    if (options.loading !== false) {\n      uni.showLoading({\n        title: options.loadingText || \"加载中\",\n        mask: true,\n      });\n    }\n\n    // 准备请求头\n    const header = {\n      \"Content-Type\": \"application/json\",\n      ...options.header, // 合并自定义请求头\n      ...(uni.getStorageSync(\"token\") && {\n        Authorization: `Bearer ${uni.getStorageSync(\"token\")}`,\n      }),\n    };\n\n    // 判断是否使用XMLHttpRequest\n    const useXHR = process.env.NODE_ENV === \"development\" && isXHRSupported();\n\n    if (useXHR) {\n      try {\n        // 创建XHR对象\n        const xhr = new XMLHttpRequest();\n        xhr.open(options.method || \"GET\", url, true);\n\n        // 设置请求头\n        for (const key in header) {\n          xhr.setRequestHeader(key, header[key]);\n        }\n\n        // 设置超时时间\n        xhr.timeout = options.timeout || TIMEOUT;\n\n        // 处理响应\n        xhr.onload = function () {\n          if (options.loading !== false) {\n            uni.hideLoading();\n          }\n\n          if (xhr.status >= 200 && xhr.status < 300) {\n            let response;\n            try {\n              response = JSON.parse(xhr.responseText);\n            } catch (e) {\n              response = xhr.responseText;\n            }\n            resolve({ data: response, statusCode: xhr.status });\n          } else {\n            if (options.showError !== false) {\n              uni.showToast({\n                title: `请求失败(${xhr.status})`,\n                icon: \"none\",\n              });\n            }\n            reject({ code: xhr.status, message: xhr.statusText });\n          }\n        };\n\n        // 处理错误\n        xhr.onerror = function (e) {\n          if (options.loading !== false) {\n            uni.hideLoading();\n          }\n          if (options.showError !== false) {\n            uni.showToast({\n              title: \"网络异常，请稍后再试\",\n              icon: \"none\",\n            });\n          }\n          reject({ message: \"网络异常\" });\n        };\n\n        // 处理超时\n        xhr.ontimeout = function () {\n          if (options.loading !== false) {\n            uni.hideLoading();\n          }\n          if (options.showError !== false) {\n            uni.showToast({\n              title: \"请求超时\",\n              icon: \"none\",\n            });\n          }\n          reject({ message: \"请求超时\" });\n        };\n\n        // 发送请求\n        if (options.method === \"GET\" || !options.data) {\n          xhr.send();\n        } else {\n          xhr.send(JSON.stringify(options.data));\n        }\n\n        return;\n      } catch (e) {\n        // 如果XHR模式失败，回退到uni.request\n      }\n    }\n\n    // 使用uni.request\n    uni.request({\n      url,\n      method: options.method || \"GET\",\n      data: options.data,\n      header,\n      timeout: options.timeout || TIMEOUT,\n      withCredentials: false, // 跨域请求不发送cookie\n      success: (res) => {\n        // 请求成功，但需检查业务状态码\n        if (res.statusCode === 200) {\n          // 如果返回直接是数据对象，则直接使用\n          if (typeof res.data === \"object\" && res.data !== null) {\n            resolve(res);\n          }\n          // 业务状态码检查\n          else if (res.data && res.data.code === 200) {\n            resolve(res.data);\n          } else {\n            // 业务错误处理\n            const errorMsg = res.data?.msg || \"请求失败\";\n            if (options.showError !== false) {\n              uni.showToast({\n                title: errorMsg,\n                icon: \"none\",\n              });\n            }\n            reject({ code: res.data?.code, message: errorMsg });\n          }\n        } else if (res.statusCode === 401) {\n          uni.showToast({\n            title: \"登录已过期，请重新登录\",\n            icon: \"none\",\n          });\n\n          // 清除token和用户信息\n          uni.removeStorageSync(\"token\");\n          uni.removeStorageSync(\"userInfo\");\n\n          // 跳转到登录页\n          setTimeout(() => {\n            uni.navigateTo({\n              url: \"/pages/login/login\",\n            });\n          }, 1500);\n\n          reject(new Error(\"未授权，请登录\"));\n        } else if (res.statusCode === 403) {\n          uni.showToast({\n            title: \"没有权限访问\",\n            icon: \"none\",\n          });\n          reject(new Error(\"没有权限\"));\n        } else if (res.statusCode === 404) {\n          uni.showToast({\n            title: \"请求的资源不存在\",\n            icon: \"none\",\n          });\n          reject(new Error(\"资源不存在\"));\n        } else if (res.statusCode >= 500) {\n          uni.showToast({\n            title: \"服务器异常，请稍后重试\",\n            icon: \"none\",\n          });\n\n          reject(new Error(\"服务器异常\"));\n        } else {\n          // HTTP状态码错误处理\n          const errorMsg = `请求失败(${res.statusCode})`;\n          if (options.showError !== false) {\n            uni.showToast({\n              title: errorMsg,\n              icon: \"none\",\n            });\n          }\n          reject({ code: res.statusCode, message: errorMsg });\n        }\n      },\n      fail: (err) => {\n        // 网络错误或其他错误\n        const errorMsg = err.errMsg || \"网络异常，请稍后再试\";\n        if (options.showError !== false) {\n          uni.showToast({\n            title: errorMsg,\n            icon: \"none\",\n          });\n        }\n        reject(err);\n      },\n      complete: () => {\n        // 隐藏加载提示\n        if (options.loading !== false) {\n          uni.hideLoading();\n        }\n\n        // 自定义完成回调\n        if (typeof options.complete === \"function\") {\n          options.complete();\n        }\n      },\n    });\n  });\n};\n\n/**\n * GET请求\n * @param {String} url - 请求URL\n * @param {Object} data - 请求参数\n * @param {Object} options - 其他选项\n * @returns {Promise} 请求结果\n */\nexport const get = (url, data = {}, options = {}) => {\n  return request({\n    ...options,\n    url,\n    method: \"GET\",\n    data,\n  });\n};\n\n/**\n * POST请求\n * @param {String} url - 请求URL\n * @param {Object} data - 请求参数\n * @param {Object} options - 其他选项\n * @returns {Promise} 请求结果\n */\nexport const post = (url, data = {}, options = {}) => {\n  return request({\n    ...options,\n    url,\n    method: \"POST\",\n    data,\n  });\n};\n\n/**\n * PUT请求\n * @param {String} url - 请求URL\n * @param {Object} data - 请求参数\n * @param {Object} options - 其他选项\n * @returns {Promise} 请求结果\n */\nexport const put = (url, data = {}, options = {}) => {\n  return request({\n    ...options,\n    url,\n    method: \"PUT\",\n    data,\n  });\n};\n\n/**\n * DELETE请求\n * @param {String} url - 请求URL\n * @param {Object} data - 请求参数\n * @param {Object} options - 其他选项\n * @returns {Promise} 请求结果\n */\nexport const del = (url, data = {}, options = {}) => {\n  return request({\n    ...options,\n    url,\n    method: \"DELETE\",\n    data,\n  });\n};\n\n/**\n * 获取完整的API URL\n * @param {String} path - API路径\n * @returns {String} 完整URL\n */\nexport const getFullUrl = (path) => {\n  return `${BASE_URL}${path}`;\n};\n\nexport default {\n  request,\n  get,\n  post,\n  put,\n  del,\n  getFullUrl,\n  BASE_URL,\n};\n"],"names":["uni"],"mappings":"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"}