{"version":3,"file":"request.js","sources":["utils/request.js"],"sourcesContent":["/**\r\n * 统一请求工具\r\n */\r\n\r\n// API基础URL配置\r\nconst BASE_URL = 'http://localhost:8082'; // 开发环境\r\n// const BASE_URL = ''; // 生产环境，根据实际部署情况配置\r\n\r\n/**\r\n * 发送请求的统一方法\r\n * @param {Object} options - 请求配置\r\n * @returns {Promise} 请求结果的Promise\r\n */\r\nexport const request = (options) => {\r\n    return new Promise((resolve, reject) => {\r\n        // 构建完整URL\r\n        const url = options.url.startsWith('http') \r\n            ? options.url \r\n            : `${BASE_URL}${options.url}`;\r\n        \r\n        // 显示加载中提示\r\n        if (options.loading !== false) {\r\n            uni.showLoading({\r\n                title: options.loadingText || '加载中',\r\n                mask: true\r\n            });\r\n        }\r\n        \r\n        // 发送请求\r\n        uni.request({\r\n            url,\r\n            method: options.method || 'GET',\r\n            data: options.data,\r\n            header: options.header,\r\n            success: (res) => {\r\n                // 请求成功，但需检查业务状态码\r\n                if (res.statusCode === 200) {\r\n                    // 业务状态码检查\r\n                    if (res.data.code === 200) {\r\n                        resolve(res.data);\r\n                    } else {\r\n                        // 业务错误处理\r\n                        const errorMsg = res.data.msg || '请求失败';\r\n                        if (options.showError !== false) {\r\n                            uni.showToast({\r\n                                title: errorMsg,\r\n                                icon: 'none'\r\n                            });\r\n                        }\r\n                        reject({ code: res.data.code, message: errorMsg });\r\n                    }\r\n                } else {\r\n                    // HTTP状态码错误处理\r\n                    const errorMsg = `请求失败(${res.statusCode})`;\r\n                    if (options.showError !== false) {\r\n                        uni.showToast({\r\n                            title: errorMsg,\r\n                            icon: 'none'\r\n                        });\r\n                    }\r\n                    reject({ code: res.statusCode, message: errorMsg });\r\n                }\r\n            },\r\n            fail: (err) => {\r\n                // 网络错误或其他错误\r\n                const errorMsg = err.errMsg || '网络异常，请稍后再试';\r\n                if (options.showError !== false) {\r\n                    uni.showToast({\r\n                        title: errorMsg,\r\n                        icon: 'none'\r\n                    });\r\n                }\r\n                console.error('请求失败:', err);\r\n                reject(err);\r\n            },\r\n            complete: () => {\r\n                // 隐藏加载提示\r\n                if (options.loading !== false) {\r\n                    uni.hideLoading();\r\n                }\r\n                \r\n                // 自定义完成回调\r\n                if (typeof options.complete === 'function') {\r\n                    options.complete();\r\n                }\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * GET请求\r\n * @param {String} url - 请求URL\r\n * @param {Object} data - 请求参数\r\n * @param {Object} options - 其他选项\r\n * @returns {Promise} 请求结果\r\n */\r\nexport const get = (url, data = {}, options = {}) => {\r\n    return request({\r\n        ...options,\r\n        url,\r\n        method: 'GET',\r\n        data\r\n    });\r\n};\r\n\r\n/**\r\n * POST请求\r\n * @param {String} url - 请求URL\r\n * @param {Object} data - 请求参数\r\n * @param {Object} options - 其他选项\r\n * @returns {Promise} 请求结果\r\n */\r\nexport const post = (url, data = {}, options = {}) => {\r\n    return request({\r\n        ...options,\r\n        url,\r\n        method: 'POST',\r\n        data\r\n    });\r\n};\r\n\r\n/**\r\n * 获取完整的API URL\r\n * @param {String} path - API路径\r\n * @returns {String} 完整URL\r\n */\r\nexport const getFullUrl = (path) => {\r\n    return `${BASE_URL}${path}`;\r\n};\r\n\r\nexport default {\r\n    request,\r\n    get,\r\n    post,\r\n    getFullUrl,\r\n    BASE_URL\r\n}; "],"names":["uni"],"mappings":";;AAKA,MAAM,WAAW;AAQV,MAAM,UAAU,CAAC,YAAY;AAChC,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AAEpC,UAAM,MAAM,QAAQ,IAAI,WAAW,MAAM,IACnC,QAAQ,MACR,GAAG,QAAQ,GAAG,QAAQ,GAAG;AAG/B,QAAI,QAAQ,YAAY,OAAO;AAC3BA,oBAAAA,MAAI,YAAY;AAAA,QACZ,OAAO,QAAQ,eAAe;AAAA,QAC9B,MAAM;AAAA,MACtB,CAAa;AAAA,IACJ;AAGDA,kBAAAA,MAAI,QAAQ;AAAA,MACR;AAAA,MACA,QAAQ,QAAQ,UAAU;AAAA,MAC1B,MAAM,QAAQ;AAAA,MACd,QAAQ,QAAQ;AAAA,MAChB,SAAS,CAAC,QAAQ;AAEd,YAAI,IAAI,eAAe,KAAK;AAExB,cAAI,IAAI,KAAK,SAAS,KAAK;AACvB,oBAAQ,IAAI,IAAI;AAAA,UACxC,OAA2B;AAEH,kBAAM,WAAW,IAAI,KAAK,OAAO;AACjC,gBAAI,QAAQ,cAAc,OAAO;AAC7BA,4BAAAA,MAAI,UAAU;AAAA,gBACV,OAAO;AAAA,gBACP,MAAM;AAAA,cACtC,CAA6B;AAAA,YACJ;AACD,mBAAO,EAAE,MAAM,IAAI,KAAK,MAAM,SAAS,SAAQ,CAAE;AAAA,UACpD;AAAA,QACrB,OAAuB;AAEH,gBAAM,WAAW,QAAQ,IAAI,UAAU;AACvC,cAAI,QAAQ,cAAc,OAAO;AAC7BA,0BAAAA,MAAI,UAAU;AAAA,cACV,OAAO;AAAA,cACP,MAAM;AAAA,YAClC,CAAyB;AAAA,UACJ;AACD,iBAAO,EAAE,MAAM,IAAI,YAAY,SAAS,SAAQ,CAAE;AAAA,QACrD;AAAA,MACJ;AAAA,MACD,MAAM,CAAC,QAAQ;AAEX,cAAM,WAAW,IAAI,UAAU;AAC/B,YAAI,QAAQ,cAAc,OAAO;AAC7BA,wBAAAA,MAAI,UAAU;AAAA,YACV,OAAO;AAAA,YACP,MAAM;AAAA,UAC9B,CAAqB;AAAA,QACJ;AACDA,sBAAc,MAAA,MAAA,SAAA,0BAAA,SAAS,GAAG;AAC1B,eAAO,GAAG;AAAA,MACb;AAAA,MACD,UAAU,MAAM;AAEZ,YAAI,QAAQ,YAAY,OAAO;AAC3BA,wBAAG,MAAC,YAAW;AAAA,QAClB;AAGD,YAAI,OAAO,QAAQ,aAAa,YAAY;AACxC,kBAAQ,SAAQ;AAAA,QACnB;AAAA,MACJ;AAAA,IACb,CAAS;AAAA,EACT,CAAK;AACL;AASY,MAAC,MAAM,CAAC,KAAK,OAAO,CAAA,GAAI,UAAU,CAAA,MAAO;AACjD,SAAO,QAAQ;AAAA,IACX,GAAG;AAAA,IACH;AAAA,IACA,QAAQ;AAAA,IACR;AAAA,EACR,CAAK;AACL;AASY,MAAC,OAAO,CAAC,KAAK,OAAO,CAAA,GAAI,UAAU,CAAA,MAAO;AAClD,SAAO,QAAQ;AAAA,IACX,GAAG;AAAA,IACH;AAAA,IACA,QAAQ;AAAA,IACR;AAAA,EACR,CAAK;AACL;;;"}