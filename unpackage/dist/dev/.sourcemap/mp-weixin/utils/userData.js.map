{"version":3,"file":"userData.js","sources":["utils/userData.js"],"sourcesContent":["/**\r\n * 用户数据管理模块\r\n * 从本地存储获取用户ID和token，并通过API获取最新的用户数据\r\n */\r\nimport { reactive } from 'vue';\r\nimport { getUserFromStorage } from './api/authApi';\r\nimport { get } from './api/request';\r\nimport { API_PATHS } from './api/config';\r\n\r\n// 创建默认用户数据对象\r\nconst createDefaultUserData = () => {\r\n    return {\r\n        userId: '',\r\n        token: '',\r\n        nickname: '游客',\r\n        avatar: '/static/images/avatar.png',\r\n        phone: '',\r\n        gender: 'unknown',\r\n        birthday: null,\r\n        pandaCoins: 0,\r\n        lightningStars: 0,\r\n        memberLevel: 1,\r\n        createTime: null,\r\n        lastLoginTime: null,\r\n        medals: [],\r\n        coupons: [],\r\n        addresses: [],\r\n        isLoading: false\r\n    };\r\n};\r\n\r\n// 创建响应式用户数据对象\r\nexport const userData = reactive(createDefaultUserData());\r\n\r\n// 从服务器获取最新用户数据\r\nexport const fetchUserDataFromServer = async () => {\r\n    if (!userData.userId) {\r\n        console.log('没有用户ID，无法获取用户数据');\r\n        return false;\r\n    }\r\n    \r\n    try {\r\n        // 标记数据加载中\r\n        userData.isLoading = true;\r\n        \r\n        // 调用API获取最新用户数据\r\n        const result = await get(`${API_PATHS.USER_PROFILE}?userId=${userData.userId}`);\r\n        \r\n        if (result.code === 200 && result.data) {\r\n            // 将API返回的用户数据更新到响应式对象\r\n            const serverUserData = result.data;\r\n            \r\n            // 打印服务器返回的完整用户数据\r\n            \r\n            // 如果有地址数据，单独打印出来\r\n            if (serverUserData.addresses && serverUserData.addresses.length > 0) {\r\n            }\r\n            \r\n            // 如果有默认地址，单独打印出来\r\n            if (serverUserData.defaultAddress) {\r\n            }\r\n            \r\n            // 更新基本用户信息\r\n            Object.keys(userData).forEach(key => {\r\n                // 跳过userId、token、coupons、medals和isLoading属性\r\n                if (key !== 'userId' && key !== 'token' && key !== 'isLoading' && \r\n                    key !== 'coupons' && key !== 'medals') {\r\n                    userData[key] = serverUserData[key] || userData[key];\r\n                }\r\n            });\r\n            \r\n            // 获取用户勋章数据\r\n            try {\r\n                const medalsResult = await get(`${API_PATHS.USER_MEDALS}/${userData.userId}`);\r\n                \r\n                if (medalsResult.code === 200 && medalsResult.data) {\r\n                    userData.medals = medalsResult.data;\r\n                } else {\r\n                }\r\n            } catch (medalsError) {\r\n            }\r\n            \r\n            // 获取用户优惠券数据\r\n            try {\r\n                const couponsResult = await get(`${API_PATHS.USER_COUPONS}/${userData.userId}/with-template`);\r\n                \r\n                if (couponsResult.code === 200 && couponsResult.data) {\r\n                    userData.coupons = couponsResult.data;\r\n                } else {\r\n                }\r\n            } catch (couponsError) {\r\n            }\r\n            \r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    } catch (error) {\r\n        return false;\r\n    } finally {\r\n        userData.isLoading = false;\r\n    }\r\n};\r\n\r\n// 初始化用户数据\r\nexport const initUserData = async () => {\r\n    try {\r\n        // 从本地存储获取用户ID和token\r\n        const storedUserData = getUserFromStorage();\r\n        \r\n        if (storedUserData && storedUserData.userId) {\r\n            // 设置用户ID和token\r\n            userData.userId = storedUserData.userId;\r\n            userData.token = storedUserData.token || '';\r\n            \r\n            // 从服务器获取最新用户数据\r\n            await fetchUserDataFromServer();\r\n            \r\n            console.log('已初始化用户数据');\r\n            return true;\r\n        } else {\r\n            console.log('未找到用户数据，使用默认值');\r\n            return false;\r\n        }\r\n    } catch (error) {\r\n        console.error('初始化用户数据失败', error);\r\n        return false;\r\n    }\r\n};\r\n\r\n// 检查用户是否已登录\r\nexport const isLoggedIn = () => {\r\n    return !!userData.userId;\r\n}; "],"names":["reactive","uni","get","API_PATHS","getUserFromStorage"],"mappings":";;;;;AAUA,MAAM,wBAAwB,MAAM;AAChC,SAAO;AAAA,IACH,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,YAAY;AAAA,IACZ,gBAAgB;AAAA,IAChB,aAAa;AAAA,IACb,YAAY;AAAA,IACZ,eAAe;AAAA,IACf,QAAQ,CAAE;AAAA,IACV,SAAS,CAAE;AAAA,IACX,WAAW,CAAE;AAAA,IACb,WAAW;AAAA,EACnB;AACA;AAGY,MAAC,WAAWA,cAAAA,SAAS,uBAAuB;AAG5C,MAAC,0BAA0B,YAAY;AAC/C,MAAI,CAAC,SAAS,QAAQ;AAClBC,kBAAAA,MAAY,MAAA,OAAA,2BAAA,iBAAiB;AAC7B,WAAO;AAAA,EACV;AAED,MAAI;AAEA,aAAS,YAAY;AAGrB,UAAM,SAAS,MAAMC,sBAAI,GAAGC,iBAAS,UAAC,YAAY,WAAW,SAAS,MAAM,EAAE;AAE9E,QAAI,OAAO,SAAS,OAAO,OAAO,MAAM;AAEpC,YAAM,iBAAiB,OAAO;AAK9B,UAAI,eAAe,aAAa,eAAe,UAAU,SAAS,GAAG;AAAA,MACpE;AAGD,UAAI,eAAe,gBAAgB;AAAA,MAClC;AAGD,aAAO,KAAK,QAAQ,EAAE,QAAQ,SAAO;AAEjC,YAAI,QAAQ,YAAY,QAAQ,WAAW,QAAQ,eAC/C,QAAQ,aAAa,QAAQ,UAAU;AACvC,mBAAS,GAAG,IAAI,eAAe,GAAG,KAAK,SAAS,GAAG;AAAA,QACtD;AAAA,MACjB,CAAa;AAGD,UAAI;AACA,cAAM,eAAe,MAAMD,sBAAI,GAAGC,iBAAS,UAAC,WAAW,IAAI,SAAS,MAAM,EAAE;AAE5E,YAAI,aAAa,SAAS,OAAO,aAAa,MAAM;AAChD,mBAAS,SAAS,aAAa;AAAA,QACnD,OAAuB;AAAA,QACN;AAAA,MACJ,SAAQ,aAAa;AAAA,MACrB;AAGD,UAAI;AACA,cAAM,gBAAgB,MAAMD,sBAAI,GAAGC,iBAAS,UAAC,YAAY,IAAI,SAAS,MAAM,gBAAgB;AAE5F,YAAI,cAAc,SAAS,OAAO,cAAc,MAAM;AAClD,mBAAS,UAAU,cAAc;AAAA,QACrD,OAAuB;AAAA,QACN;AAAA,MACJ,SAAQ,cAAc;AAAA,MACtB;AAED,aAAO;AAAA,IACnB,OAAe;AACH,aAAO;AAAA,IACV;AAAA,EACJ,SAAQ,OAAO;AACZ,WAAO;AAAA,EACf,UAAc;AACN,aAAS,YAAY;AAAA,EACxB;AACL;AAGY,MAAC,eAAe,YAAY;AACpC,MAAI;AAEA,UAAM,iBAAiBC,kBAAAA;AAEvB,QAAI,kBAAkB,eAAe,QAAQ;AAEzC,eAAS,SAAS,eAAe;AACjC,eAAS,QAAQ,eAAe,SAAS;AAGzC,YAAM,wBAAuB;AAE7BH,oBAAAA,MAAA,MAAA,OAAA,4BAAY,UAAU;AACtB,aAAO;AAAA,IACnB,OAAe;AACHA,oBAAAA,MAAA,MAAA,OAAA,4BAAY,eAAe;AAC3B,aAAO;AAAA,IACV;AAAA,EACJ,SAAQ,OAAO;AACZA,kBAAA,MAAA,MAAA,SAAA,4BAAc,aAAa,KAAK;AAChC,WAAO;AAAA,EACV;AACL;;;;"}