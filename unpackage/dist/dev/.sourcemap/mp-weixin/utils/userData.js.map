{"version":3,"file":"userData.js","sources":["utils/userData.js"],"sourcesContent":["/**\n * 用户数据管理模块\n * 从本地存储获取用户ID和token，并通过API获取最新的用户数据\n */\nimport { reactive } from \"vue\";\nimport { getUserFromStorage } from \"./api/authApi\";\nimport { get } from \"./api/request\";\nimport { API_PATHS } from \"./api/config\";\n\n// 创建默认用户数据对象\nconst createDefaultUserData = () => {\n  return {\n    userId: \"\",\n    token: \"\",\n    nickname: \"游客\",\n    avatar: \"/static/images/avatar.png\",\n    backgroundImage: \"/static/images/profile-background.jpg\",\n    bio: \"记录生活的点滴，热爱分享☀\",\n    phone: \"\",\n    gender: \"unknown\",\n    birthday: null,\n    pandaCoins: 0,\n    lightningStars: 0,\n    memberLevel: 1,\n    createTime: null,\n    lastLoginTime: null,\n    followingCount: 0, // 关注数\n    followersCount: 0, // 粉丝数\n    likesReceivedCount: 0, // 获赞数\n    medals: [],\n    coupons: [],\n    addresses: [],\n    isLoading: false,\n  };\n};\n\n// 创建响应式用户数据对象\nexport const userData = reactive(createDefaultUserData());\n\n// 从服务器获取最新用户数据\nexport const fetchUserDataFromServer = async () => {\n  if (!userData.userId) {\n    return false;\n  }\n\n  try {\n    // 标记数据加载中\n    userData.isLoading = true;\n\n    // 调用API获取最新用户数据\n    const result = await get(\n      `${API_PATHS.USER_PROFILE}?userId=${userData.userId}`\n    );\n\n    if (result.code === 200 && result.data) {\n      // 将API返回的用户数据更新到响应式对象\n      const serverUserData = result.data;\n\n      // 打印服务器返回的完整用户数据\n\n      // 如果有地址数据，单独打印出来\n      if (serverUserData.addresses && serverUserData.addresses.length > 0) {\n      }\n\n      // 如果有默认地址，单独打印出来\n      if (serverUserData.defaultAddress) {\n      }\n\n      // 更新基本用户信息\n      Object.keys(userData).forEach((key) => {\n        // 跳过userId、token、coupons、medals和isLoading属性\n        if (\n          key !== \"userId\" &&\n          key !== \"token\" &&\n          key !== \"isLoading\" &&\n          key !== \"coupons\" &&\n          key !== \"medals\"\n        ) {\n          userData[key] = serverUserData[key] || userData[key];\n        }\n      });\n\n      // 确保特别处理关注数、粉丝数和获赞数\n      userData.followingCount = serverUserData.followingCount || 0;\n      userData.followersCount = serverUserData.followersCount || 0;\n      userData.likesReceivedCount = serverUserData.likesReceivedCount || 0;\n\n      // 确保处理背景图片字段\n      userData.backgroundImage =\n        serverUserData.backgroundImage ||\n        \"/static/images/profile-background.jpg\";\n\n      // 确保处理bio简介字段\n      userData.bio = serverUserData.bio || \"记录生活的点滴，热爱分享☀\";\n\n      // 获取用户勋章数据\n      try {\n        const medalsResult = await get(\n          `${API_PATHS.USER_MEDALS}/${userData.userId}`\n        );\n\n        if (medalsResult.code === 200 && medalsResult.data) {\n          userData.medals = medalsResult.data;\n        } else {\n        }\n      } catch (medalsError) {}\n\n      // 获取用户优惠券数据\n      try {\n        const couponsResult = await get(\n          `${API_PATHS.USER_COUPONS}/${userData.userId}/with-template`\n        );\n\n        if (couponsResult.code === 200 && couponsResult.data) {\n          userData.coupons = couponsResult.data;\n        } else {\n        }\n      } catch (couponsError) {}\n\n      return true;\n    } else {\n      return false;\n    }\n  } catch (error) {\n    return false;\n  } finally {\n    userData.isLoading = false;\n  }\n};\n\n// 初始化用户数据\nexport const initUserData = async () => {\n  try {\n    // 从本地存储获取用户ID和token\n    const storedUserData = getUserFromStorage();\n\n    if (storedUserData && storedUserData.userId) {\n      // 设置用户ID和token\n      userData.userId = storedUserData.userId;\n      userData.token = storedUserData.token || \"\";\n\n      // 从服务器获取最新用户数据\n      await fetchUserDataFromServer();\n      return true;\n    } else {\n      return false;\n    }\n  } catch (error) {\n    return false;\n  }\n};\n\n// 检查用户是否已登录\nexport const isLoggedIn = () => {\n  return !!userData.userId;\n};\n"],"names":["reactive","get","API_PATHS","getUserFromStorage"],"mappings":";;;;;AAUA,MAAM,wBAAwB,MAAM;AAClC,SAAO;AAAA,IACL,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,iBAAiB;AAAA,IACjB,KAAK;AAAA,IACL,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,YAAY;AAAA,IACZ,gBAAgB;AAAA,IAChB,aAAa;AAAA,IACb,YAAY;AAAA,IACZ,eAAe;AAAA,IACf,gBAAgB;AAAA;AAAA,IAChB,gBAAgB;AAAA;AAAA,IAChB,oBAAoB;AAAA;AAAA,IACpB,QAAQ,CAAE;AAAA,IACV,SAAS,CAAE;AAAA,IACX,WAAW,CAAE;AAAA,IACb,WAAW;AAAA,EACf;AACA;AAGY,MAAC,WAAWA,cAAAA,SAAS,uBAAuB;AAG5C,MAAC,0BAA0B,YAAY;AACjD,MAAI,CAAC,SAAS,QAAQ;AACpB,WAAO;AAAA,EACR;AAED,MAAI;AAEF,aAAS,YAAY;AAGrB,UAAM,SAAS,MAAMC,kBAAG;AAAA,MACtB,GAAGC,iBAAS,UAAC,YAAY,WAAW,SAAS,MAAM;AAAA,IACzD;AAEI,QAAI,OAAO,SAAS,OAAO,OAAO,MAAM;AAEtC,YAAM,iBAAiB,OAAO;AAK9B,UAAI,eAAe,aAAa,eAAe,UAAU,SAAS,GAAG;AAAA,MACpE;AAGD,UAAI,eAAe,gBAAgB;AAAA,MAClC;AAGD,aAAO,KAAK,QAAQ,EAAE,QAAQ,CAAC,QAAQ;AAErC,YACE,QAAQ,YACR,QAAQ,WACR,QAAQ,eACR,QAAQ,aACR,QAAQ,UACR;AACA,mBAAS,GAAG,IAAI,eAAe,GAAG,KAAK,SAAS,GAAG;AAAA,QACpD;AAAA,MACT,CAAO;AAGD,eAAS,iBAAiB,eAAe,kBAAkB;AAC3D,eAAS,iBAAiB,eAAe,kBAAkB;AAC3D,eAAS,qBAAqB,eAAe,sBAAsB;AAGnE,eAAS,kBACP,eAAe,mBACf;AAGF,eAAS,MAAM,eAAe,OAAO;AAGrC,UAAI;AACF,cAAM,eAAe,MAAMD,kBAAG;AAAA,UAC5B,GAAGC,iBAAS,UAAC,WAAW,IAAI,SAAS,MAAM;AAAA,QACrD;AAEQ,YAAI,aAAa,SAAS,OAAO,aAAa,MAAM;AAClD,mBAAS,SAAS,aAAa;AAAA,QACzC,OAAe;AAAA,QACN;AAAA,MACT,SAAe,aAAa;AAAA,MAAE;AAGxB,UAAI;AACF,cAAM,gBAAgB,MAAMD,kBAAG;AAAA,UAC7B,GAAGC,iBAAS,UAAC,YAAY,IAAI,SAAS,MAAM;AAAA,QACtD;AAEQ,YAAI,cAAc,SAAS,OAAO,cAAc,MAAM;AACpD,mBAAS,UAAU,cAAc;AAAA,QAC3C,OAAe;AAAA,QACN;AAAA,MACT,SAAe,cAAc;AAAA,MAAE;AAEzB,aAAO;AAAA,IACb,OAAW;AACL,aAAO;AAAA,IACR;AAAA,EACF,SAAQ,OAAO;AACd,WAAO;AAAA,EACX,UAAY;AACR,aAAS,YAAY;AAAA,EACtB;AACH;AAGY,MAAC,eAAe,YAAY;AACtC,MAAI;AAEF,UAAM,iBAAiBC,kBAAAA;AAEvB,QAAI,kBAAkB,eAAe,QAAQ;AAE3C,eAAS,SAAS,eAAe;AACjC,eAAS,QAAQ,eAAe,SAAS;AAGzC,YAAM,wBAAuB;AAC7B,aAAO;AAAA,IACb,OAAW;AACL,aAAO;AAAA,IACR;AAAA,EACF,SAAQ,OAAO;AACd,WAAO;AAAA,EACR;AACH;;;;"}