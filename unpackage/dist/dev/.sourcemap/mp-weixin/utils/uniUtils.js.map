{"version":3,"file":"uniUtils.js","sources":["utils/uniUtils.js"],"sourcesContent":["/**\r\n * uni-app 常用工具函数封装\r\n */\r\n\r\n/**\r\n * 显示消息提示框\r\n * @param {string} title 提示的内容\r\n * @param {string} icon 图标，有效值为 success、loading、none、error\r\n * @param {number} duration 提示的延迟时间，单位毫秒\r\n * @param {boolean} mask 是否显示透明蒙层，防止触摸穿透\r\n */\r\nexport const toast = (title, icon = 'none', duration = 1500, mask = false) => {\r\n  uni.showToast({\r\n    title,\r\n    icon,\r\n    duration,\r\n    mask\r\n  })\r\n}\r\n\r\n/**\r\n * 显示模态弹窗\r\n * @param {string} title 提示的标题\r\n * @param {string} content 提示的内容\r\n * @param {boolean} showCancel 是否显示取消按钮\r\n * @param {string} cancelText 取消按钮的文字\r\n * @param {string} confirmText 确认按钮的文字\r\n * @returns {Promise} 返回一个Promise，点击确认按钮时resolved为true，点击取消按钮时resolved为false\r\n */\r\nexport const modal = (title, content, showCancel = true, cancelText = '取消', confirmText = '确定') => {\r\n  return new Promise((resolve) => {\r\n    uni.showModal({\r\n      title,\r\n      content,\r\n      showCancel,\r\n      cancelText,\r\n      confirmText,\r\n      success: (res) => {\r\n        if (res.confirm) {\r\n          resolve(true)\r\n        } else if (res.cancel) {\r\n          resolve(false)\r\n        }\r\n      },\r\n      fail: () => {\r\n        resolve(false)\r\n      }\r\n    })\r\n  })\r\n}\r\n\r\n/**\r\n * 显示loading提示框\r\n * @param {string} title 提示的内容\r\n * @param {boolean} mask 是否显示透明蒙层，防止触摸穿透\r\n */\r\nexport const showLoading = (title = '加载中', mask = true) => {\r\n  uni.showLoading({\r\n    title,\r\n    mask\r\n  })\r\n}\r\n\r\n/**\r\n * 隐藏loading提示框\r\n */\r\nexport const hideLoading = () => {\r\n  uni.hideLoading()\r\n}\r\n\r\n/**\r\n * 保存数据到本地存储\r\n * @param {string} key 本地缓存中的指定的key\r\n * @param {any} data 需要存储的内容，只支持原生类型、Date、及能够通过JSON.stringify序列化的对象\r\n */\r\nexport const setStorage = (key, data) => {\r\n  try {\r\n    uni.setStorageSync(key, data)\r\n  } catch (e) {\r\n    console.error('setStorage error:', e)\r\n  }\r\n}\r\n\r\n/**\r\n * 从本地存储中获取数据\r\n * @param {string} key 本地缓存中的指定的key\r\n * @returns {any} key对应的内容\r\n */\r\nexport const getStorage = (key) => {\r\n  try {\r\n    return uni.getStorageSync(key)\r\n  } catch (e) {\r\n    console.error('getStorage error:', e)\r\n    return null\r\n  }\r\n}\r\n\r\n/**\r\n * 从本地存储中移除数据\r\n * @param {string} key 本地缓存中的指定的key\r\n */\r\nexport const removeStorage = (key) => {\r\n  try {\r\n    uni.removeStorageSync(key)\r\n  } catch (e) {\r\n    console.error('removeStorage error:', e)\r\n  }\r\n}\r\n\r\n/**\r\n * 清理本地数据存储\r\n */\r\nexport const clearStorage = () => {\r\n  try {\r\n    uni.clearStorageSync()\r\n  } catch (e) {\r\n    console.error('clearStorage error:', e)\r\n  }\r\n}\r\n\r\n/**\r\n * 格式化日期\r\n * @param {Date|string|number} date 日期对象、日期字符串或时间戳\r\n * @param {string} format 格式化模式，如 'YYYY-MM-DD HH:mm:ss'\r\n * @returns {string} 格式化后的日期字符串\r\n */\r\nexport const formatDate = (date, format = 'YYYY-MM-DD HH:mm:ss') => {\r\n  if (!date) return ''\r\n  \r\n  // 如果是时间戳或日期字符串，转为Date对象\r\n  if (typeof date !== 'object') {\r\n    date = new Date(date)\r\n  }\r\n  \r\n  if (!(date instanceof Date) || isNaN(date.getTime())) {\r\n    return ''\r\n  }\r\n\r\n  const year = date.getFullYear()\r\n  const month = date.getMonth() + 1\r\n  const day = date.getDate()\r\n  const hour = date.getHours()\r\n  const minute = date.getMinutes()\r\n  const second = date.getSeconds()\r\n\r\n  const paddedMonth = month.toString().padStart(2, '0')\r\n  const paddedDay = day.toString().padStart(2, '0')\r\n  const paddedHour = hour.toString().padStart(2, '0')\r\n  const paddedMinute = minute.toString().padStart(2, '0')\r\n  const paddedSecond = second.toString().padStart(2, '0')\r\n\r\n  return format\r\n    .replace(/YYYY/g, year)\r\n    .replace(/MM/g, paddedMonth)\r\n    .replace(/DD/g, paddedDay)\r\n    .replace(/HH/g, paddedHour)\r\n    .replace(/mm/g, paddedMinute)\r\n    .replace(/ss/g, paddedSecond)\r\n}\r\n\r\n/**\r\n * 节流函数\r\n * @param {Function} fn 需要执行的函数\r\n * @param {number} wait 等待时间，单位毫秒\r\n * @returns {Function} 节流后的函数\r\n */\r\nexport const throttle = (fn, wait = 300) => {\r\n  let lastTime = 0\r\n  return function(...args) {\r\n    const now = Date.now()\r\n    if (now - lastTime >= wait) {\r\n      fn.apply(this, args)\r\n      lastTime = now\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 防抖函数\r\n * @param {Function} fn 需要执行的函数\r\n * @param {number} delay 延迟时间，单位毫秒\r\n * @returns {Function} 防抖后的函数\r\n */\r\nexport const debounce = (fn, delay = 300) => {\r\n  let timer = null\r\n  return function(...args) {\r\n    if (timer) clearTimeout(timer)\r\n    timer = setTimeout(() => {\r\n      fn.apply(this, args)\r\n    }, delay)\r\n  }\r\n}\r\n\r\n/**\r\n * 深拷贝对象\r\n * @param {Object} obj 需要拷贝的对象\r\n * @returns {Object} 拷贝后的新对象\r\n */\r\nexport const deepClone = (obj) => {\r\n  if (obj === null || typeof obj !== 'object') {\r\n    return obj\r\n  }\r\n  \r\n  try {\r\n    return JSON.parse(JSON.stringify(obj))\r\n  } catch (e) {\r\n    console.error('deepClone error:', e)\r\n    return obj\r\n  }\r\n}\r\n\r\nexport default {\r\n  toast,\r\n  modal,\r\n  showLoading,\r\n  hideLoading,\r\n  setStorage,\r\n  getStorage,\r\n  removeStorage,\r\n  clearStorage,\r\n  formatDate,\r\n  throttle,\r\n  debounce,\r\n  deepClone\r\n} "],"names":["uni"],"mappings":";;AAWY,MAAC,QAAQ,CAAC,OAAO,OAAO,QAAQ,WAAW,MAAM,OAAO,UAAU;AAC5EA,gBAAAA,MAAI,UAAU;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAG;AACH;;"}