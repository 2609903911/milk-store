{"version":3,"file":"followApi.js","sources":["utils/api/followApi.js"],"sourcesContent":["import { request } from \"./request\";\n\n/**\n * 关注用户\n * @param {string} followedId 被关注用户ID\n * @returns {Promise<Object>} 关注结果\n */\nexport const followUser = (followedId) => {\n  const currentUser = uni.getStorageSync(\"userInfo\");\n  const follower_id = currentUser?.userId;\n\n  // 检查follower_id是否存在\n  if (!follower_id) {\n    return Promise.reject(new Error(\"未登录或用户ID不存在\"));\n  }\n\n  // 直接在URL中添加follower_id参数\n  return request({\n    url: `/api/follow/${followedId}?follower_id=${encodeURIComponent(\n      follower_id\n    )}`,\n    method: \"POST\",\n  });\n};\n\n/**\n * 取消关注\n * @param {string} followedId 被关注用户ID\n * @returns {Promise<Object>} 取消关注结果\n */\nexport const unfollowUser = (followedId) => {\n  const currentUser = uni.getStorageSync(\"userInfo\");\n  const follower_id = currentUser?.userId;\n\n  // 检查follower_id是否存在\n  if (!follower_id) {\n    return Promise.reject(new Error(\"未登录或用户ID不存在\"));\n  }\n\n  // 直接在URL中添加follower_id参数\n  return request({\n    url: `/api/follow/${followedId}?follower_id=${encodeURIComponent(\n      follower_id\n    )}`,\n    method: \"DELETE\",\n  });\n};\n\n/**\n * 检查关注状态\n * @param {string} followedId 被关注用户ID\n * @returns {Promise<Object>} 关注状态\n */\nexport const checkFollowStatus = (followedId) => {\n  const currentUser = uni.getStorageSync(\"userInfo\");\n  const follower_id = currentUser?.userId;\n\n  // 检查follower_id是否存在\n  if (!follower_id) {\n    return Promise.reject(new Error(\"未登录或用户ID不存在\"));\n  }\n\n  // 直接在URL中添加follower_id参数\n  return request({\n    url: `/api/follow/check/${followedId}?follower_id=${encodeURIComponent(\n      follower_id\n    )}`,\n    method: \"GET\",\n  });\n};\n\n/**\n * 批量检查关注状态\n * @param {Array<string>} followedIds 被关注用户ID列表\n * @returns {Promise<Object>} 批量关注状态\n */\nexport const batchCheckFollowStatus = (followedIds) => {\n  const currentUser = uni.getStorageSync(\"userInfo\");\n  const follower_id = currentUser?.userId;\n\n  // 检查follower_id是否存在\n  if (!follower_id) {\n    return Promise.reject(new Error(\"未登录或用户ID不存在\"));\n  }\n\n  // 直接在URL中添加follower_id参数\n  return request({\n    url: `/api/follow/check/batch?follower_id=${encodeURIComponent(\n      follower_id\n    )}`,\n    method: \"POST\",\n    data: followedIds,\n  });\n};\n\n/**\n * 获取用户关注列表\n * @param {string} userId 用户ID\n * @param {number} page 页码（默认1）\n * @param {number} size 每页数量（默认10）\n * @returns {Promise<Object>} 用户关注列表\n */\nexport const getUserFollowing = (userId, page = 1, size = 10) => {\n  const currentUser = uni.getStorageSync(\"userInfo\");\n  const current_user_id = currentUser?.userId;\n\n  // 构建URL查询参数\n  let url = `/api/follow/following/${userId}?page=${page}&size=${size}`;\n  if (current_user_id) {\n    url += `&current_user_id=${encodeURIComponent(current_user_id)}`;\n  }\n\n  return request({\n    url,\n    method: \"GET\",\n  });\n};\n\n/**\n * 获取用户粉丝列表\n * @param {string} userId 用户ID\n * @param {number} page 页码（默认1）\n * @param {number} size 每页数量（默认10）\n * @returns {Promise<Object>} 用户粉丝列表\n */\nexport const getUserFollowers = (userId, page = 1, size = 10) => {\n  const currentUser = uni.getStorageSync(\"userInfo\");\n  const current_user_id = currentUser?.userId;\n\n  // 构建URL查询参数\n  let url = `/api/follow/followers/${userId}?page=${page}&size=${size}`;\n  if (current_user_id) {\n    url += `&current_user_id=${encodeURIComponent(current_user_id)}`;\n  }\n\n  return request({\n    url,\n    method: \"GET\",\n  });\n};\n"],"names":["uni","request"],"mappings":";;;AAOY,MAAC,aAAa,CAAC,eAAe;AACxC,QAAM,cAAcA,cAAAA,MAAI,eAAe,UAAU;AACjD,QAAM,cAAc,2CAAa;AAGjC,MAAI,CAAC,aAAa;AAChB,WAAO,QAAQ,OAAO,IAAI,MAAM,aAAa,CAAC;AAAA,EAC/C;AAGD,SAAOC,0BAAQ;AAAA,IACb,KAAK,eAAe,UAAU,gBAAgB;AAAA,MAC5C;AAAA,IACN,CAAK;AAAA,IACD,QAAQ;AAAA,EACZ,CAAG;AACH;AAOY,MAAC,eAAe,CAAC,eAAe;AAC1C,QAAM,cAAcD,cAAAA,MAAI,eAAe,UAAU;AACjD,QAAM,cAAc,2CAAa;AAGjC,MAAI,CAAC,aAAa;AAChB,WAAO,QAAQ,OAAO,IAAI,MAAM,aAAa,CAAC;AAAA,EAC/C;AAGD,SAAOC,0BAAQ;AAAA,IACb,KAAK,eAAe,UAAU,gBAAgB;AAAA,MAC5C;AAAA,IACN,CAAK;AAAA,IACD,QAAQ;AAAA,EACZ,CAAG;AACH;AAOY,MAAC,oBAAoB,CAAC,eAAe;AAC/C,QAAM,cAAcD,cAAAA,MAAI,eAAe,UAAU;AACjD,QAAM,cAAc,2CAAa;AAGjC,MAAI,CAAC,aAAa;AAChB,WAAO,QAAQ,OAAO,IAAI,MAAM,aAAa,CAAC;AAAA,EAC/C;AAGD,SAAOC,0BAAQ;AAAA,IACb,KAAK,qBAAqB,UAAU,gBAAgB;AAAA,MAClD;AAAA,IACN,CAAK;AAAA,IACD,QAAQ;AAAA,EACZ,CAAG;AACH;AAOO,MAAM,yBAAyB,CAAC,gBAAgB;AACrD,QAAM,cAAcD,cAAAA,MAAI,eAAe,UAAU;AACjD,QAAM,cAAc,2CAAa;AAGjC,MAAI,CAAC,aAAa;AAChB,WAAO,QAAQ,OAAO,IAAI,MAAM,aAAa,CAAC;AAAA,EAC/C;AAGD,SAAOC,0BAAQ;AAAA,IACb,KAAK,uCAAuC;AAAA,MAC1C;AAAA,IACN,CAAK;AAAA,IACD,QAAQ;AAAA,IACR,MAAM;AAAA,EACV,CAAG;AACH;AASO,MAAM,mBAAmB,CAAC,QAAQ,OAAO,GAAG,OAAO,OAAO;AAC/D,QAAM,cAAcD,cAAAA,MAAI,eAAe,UAAU;AACjD,QAAM,kBAAkB,2CAAa;AAGrC,MAAI,MAAM,yBAAyB,MAAM,SAAS,IAAI,SAAS,IAAI;AACnE,MAAI,iBAAiB;AACnB,WAAO,oBAAoB,mBAAmB,eAAe,CAAC;AAAA,EAC/D;AAED,SAAOC,0BAAQ;AAAA,IACb;AAAA,IACA,QAAQ;AAAA,EACZ,CAAG;AACH;AASO,MAAM,mBAAmB,CAAC,QAAQ,OAAO,GAAG,OAAO,OAAO;AAC/D,QAAM,cAAcD,cAAAA,MAAI,eAAe,UAAU;AACjD,QAAM,kBAAkB,2CAAa;AAGrC,MAAI,MAAM,yBAAyB,MAAM,SAAS,IAAI,SAAS,IAAI;AACnE,MAAI,iBAAiB;AACnB,WAAO,oBAAoB,mBAAmB,eAAe,CAAC;AAAA,EAC/D;AAED,SAAOC,0BAAQ;AAAA,IACb;AAAA,IACA,QAAQ;AAAA,EACZ,CAAG;AACH;;;;;;;;;;;;;;"}