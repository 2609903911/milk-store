{"version":3,"file":"postApi.js","sources":["utils/api/postApi.js"],"sourcesContent":["// 帖子相关API服务\n\nimport { get, post, put, del } from \"./request\";\n\n/**\n * 获取帖子列表\n * @param {Object} params 查询参数\n * @param {Number} params.page 页码\n * @param {Number} params.size 每页大小\n * @param {String} params.sortBy 排序字段\n * @returns {Promise} 帖子列表数据\n */\nexport const fetchPosts = async (params = {}) => {\n  try {\n    const response = await get(\"/api/posts\", params);\n    return response || [];\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * 获取帖子详情\n * @param {String|Number} postId 帖子ID\n * @returns {Promise} 帖子详情数据\n */\nexport const fetchPostById = async (postId) => {\n  try {\n    if (!postId && postId !== 0) {\n      throw new Error(\"帖子ID不能为空\");\n    }\n\n    const response = await get(`/api/posts/${postId}`);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * 发布帖子\n * @param {Object} data 帖子数据\n * @param {String} data.title 帖子标题\n * @param {String} data.content 帖子内容\n * @param {String|Number} data.productId 相关产品ID（必需）\n * @param {String|Number} data.userId 用户ID（必需）\n * @param {Array} data.images 帖子图片URL列表\n * @param {String} data.imagesStr 帖子图片URL字符串（多个URL用\"||\"分隔）\n * @returns {Promise} 创建的帖子数据\n */\nexport const createPost = async (data) => {\n  try {\n    // 验证必需的用户ID\n    if (!data.userId && data.userId !== 0) {\n      throw new Error(\"用户ID不能为空\");\n    }\n\n    // 验证必需的产品ID\n    if (!data.productId && data.productId !== 0) {\n      throw new Error(\"产品ID不能为空\");\n    }\n\n    // 确保userId和productId是字符串类型\n    const postData = { ...data };\n    postData.userId = String(postData.userId);\n    postData.productId = String(postData.productId);\n\n    // 确保必填字段存在\n    if (!postData.title) throw new Error(\"帖子标题不能为空\");\n    if (!postData.content) throw new Error(\"帖子内容不能为空\");\n\n    // 如果提供了images数组但没有imagesStr，则从images数组创建imagesStr\n    if (\n      postData.images &&\n      Array.isArray(postData.images) &&\n      postData.images.length > 0 &&\n      !postData.imagesStr\n    ) {\n      postData.imagesStr = postData.images.join(\"||\");\n    }\n\n    // 如果提供了imagesStr但没有images数组，则从imagesStr创建images数组\n    if (\n      postData.imagesStr &&\n      (!postData.images ||\n        !Array.isArray(postData.images) ||\n        postData.images.length === 0)\n    ) {\n      postData.images = postData.imagesStr\n        .split(\"||\")\n        .filter((url) => url && url.trim() !== \"\");\n    }\n\n    // 尝试两种方式发送请求\n    try {\n      // 方式1：将userId作为URL参数\n      const response = await post(`/api/posts?userId=${postData.userId}`, {\n        title: postData.title,\n        content: postData.content,\n        productId: postData.productId,\n        images: postData.images,\n        imagesStr: postData.imagesStr,\n      });\n      return response;\n    } catch (error1) {\n      // 方式2：将userId放在请求体中\n      const response = await post(\"/api/posts\", postData);\n      return response;\n    }\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * 更新帖子\n * @param {String|Number} postId 帖子ID\n * @param {Object} data 更新数据\n * @param {String} data.title 帖子标题\n * @param {String} data.content 帖子内容\n * @param {Array} data.images 帖子图片数组\n * @returns {Promise} 更新后的帖子数据\n */\nexport const updatePost = async (postId, data) => {\n  try {\n    if (!postId && postId !== 0) {\n      throw new Error(\"帖子ID不能为空\");\n    }\n\n    const response = await put(`/api/posts/${postId}`, data);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * 删除帖子\n * @param {String|Number} postId 帖子ID\n * @returns {Promise} 删除结果\n */\nexport const deletePost = async (postId) => {\n  try {\n    if (!postId && postId !== 0) {\n      throw new Error(\"帖子ID不能为空\");\n    }\n\n    const response = await del(`/api/posts/${postId}`);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * 获取用户发布的帖子\n * @param {String|Number} userId 用户ID\n * @param {Object} params 查询参数\n * @param {Number} params.page 页码\n * @param {Number} params.size 每页大小\n * @returns {Promise} 用户帖子列表\n */\nexport const fetchUserPosts = async (userId, params = {}) => {\n  try {\n    if (!userId && userId !== 0) {\n      throw new Error(\"用户ID不能为空\");\n    }\n\n    const response = await get(`/api/posts/users/${userId}/posts`, params);\n    return response || [];\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * 获取商品相关帖子\n * @param {String|Number} productId 商品ID\n * @param {Object} params 查询参数\n * @param {Number} params.page 页码\n * @param {Number} params.size 每页大小\n * @returns {Promise} 商品相关帖子列表\n */\nexport const fetchProductPosts = async (productId, params = {}) => {\n  try {\n    if (!productId && productId !== 0) {\n      throw new Error(\"商品ID不能为空\");\n    }\n\n    const response = await get(`/api/posts/product/${productId}`, params);\n    return response || [];\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * 获取帖子评论列表\n * @param {String|Number} postId 帖子ID\n * @param {Object} params 查询参数\n * @param {Number} params.page 页码\n * @param {Number} params.size 每页数量\n * @returns {Promise} 评论列表数据\n */\nexport const fetchPostComments = async (postId, params = {}) => {\n  try {\n    if (!postId && postId !== 0) {\n      throw new Error(\"帖子ID不能为空\");\n    }\n\n    const response = await get(`/api/posts/${postId}/comments`, params);\n    return response || [];\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * 发表评论\n * @param {Object} data 评论数据\n * @param {String|Number} data.postId 帖子ID\n * @param {String} data.content 评论内容\n * @param {String|Number} data.parentId 父评论ID（回复评论时使用）\n * @param {String|Number} data.replyToUserId 被回复用户ID（回复评论时使用）\n * @returns {Promise} 创建的评论数据\n */\nexport const createComment = async (data) => {\n  try {\n    if (!data.postId && data.postId !== 0) {\n      throw new Error(\"帖子ID不能为空\");\n    }\n\n    if (!data.content || data.content.trim() === \"\") {\n      throw new Error(\"评论内容不能为空\");\n    }\n\n    const response = await post(\"/api/comments\", data);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * 删除评论\n * @param {String|Number} commentId 评论ID\n * @returns {Promise} 删除结果\n */\nexport const deleteComment = async (commentId) => {\n  try {\n    if (!commentId && commentId !== 0) {\n      throw new Error(\"评论ID不能为空\");\n    }\n\n    const response = await del(`/api/comments/${commentId}`);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * 点赞/取消点赞\n * @param {String} targetId 目标ID（帖子ID如\"post_1001\"或评论ID如\"comment_1001\"）\n * @param {Number} targetType 目标类型（1-帖子，2-评论）\n * @param {String} userId 用户ID（必需）\n * @returns {Promise} 点赞结果\n */\nexport const likeOrUnlike = async (targetId, targetType, userId) => {\n  try {\n    if (!targetId) {\n      throw new Error(\"目标ID不能为空\");\n    }\n\n    if (targetType !== 1 && targetType !== 2) {\n      throw new Error(\"目标类型必须为1(帖子)或2(评论)\");\n    }\n\n    if (!userId) {\n      throw new Error(\"用户ID不能为空\");\n    }\n\n    const response = await post(\n      `/api/${targetType}/${targetId}/like?userId=${userId}`\n    );\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * 获取用户点赞的帖子\n * @param {String} userId 用户ID\n * @param {Object} params 查询参数\n * @param {Number} params.page 页码\n * @param {Number} params.size 每页数量\n * @returns {Promise} 用户点赞的帖子列表\n */\nexport const fetchUserLikedPosts = async (userId, params = {}) => {\n  try {\n    if (!userId) {\n      throw new Error(\"用户ID不能为空\");\n    }\n\n    const response = await get(`/api/users/${userId}/liked-posts`, params);\n    return response || { code: 0, data: { posts: [] } };\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * 检查用户是否点赞\n * @param {Object} params 查询参数\n * @param {String} params.userId 用户ID（必填）\n * @param {String} params.targetId 目标ID（帖子ID或评论ID，必填）\n * @param {Number} params.targetType 目标类型（1-帖子，2-评论，必填）\n * @returns {Promise} 检查结果，data.liked表示是否已点赞\n */\nexport const checkUserLike = async (params = {}) => {\n  try {\n    if (!params.targetId) {\n      throw new Error(\"目标ID不能为空\");\n    }\n\n    if (params.targetType !== 1 && params.targetType !== 2) {\n      throw new Error(\"目标类型必须为1(帖子)或2(评论)\");\n    }\n\n    if (!params.userId) {\n      throw new Error(\"用户ID不能为空\");\n    }\n\n    const response = await get(\"/api/users/check-like\", params);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * 批量检查点赞状态\n * @param {String} userId 用户ID（必填）\n * @param {Object} data 请求数据\n * @param {Array<String>} data.targetIds 目标ID数组\n * @param {Number} data.targetType 目标类型（1-帖子，2-评论）\n * @returns {Promise} 批量检查结果，返回Map结构，key为目标ID，value为是否点赞\n */\nexport const batchCheckUserLike = async (userId, data) => {\n  try {\n    if (!userId) {\n      throw new Error(\"用户ID不能为空\");\n    }\n\n    if (\n      !data.targetIds ||\n      !Array.isArray(data.targetIds) ||\n      data.targetIds.length === 0\n    ) {\n      throw new Error(\"目标ID数组不能为空\");\n    }\n\n    if (data.targetType !== 1 && data.targetType !== 2) {\n      throw new Error(\"目标类型必须为1(帖子)或2(评论)\");\n    }\n\n    const response = await post(\n      `/api/users/batch-check-like?userId=${userId}`,\n      data\n    );\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * 上传帖子图片\n * @param {Object} options 上传选项\n * @param {Array<String>} options.filePaths 本地文件路径数组\n * @param {String} options.userId 用户ID（可选）\n * @param {String|Number} options.postId 帖子ID（可选，关联到特定帖子）\n * @param {Function} options.onProgress 上传进度回调函数（可选）\n * @returns {Promise} 上传结果，包含图片URL数组\n */\nexport const uploadPostImages = async (options = {}) => {\n  try {\n    if (\n      !options.filePaths ||\n      !Array.isArray(options.filePaths) ||\n      options.filePaths.length === 0\n    ) {\n      throw new Error(\"文件路径数组不能为空\");\n    }\n\n    // 导入BASE_URL以构建完整URL\n    const { BASE_URL, getFullUrl } = require(\"./config\");\n    const fullUploadUrl = BASE_URL + \"/api/upload/post/images\";\n\n    // 收集所有上传的图片URL\n    let allImageUrls = [];\n\n    for (const filePath of options.filePaths) {\n      try {\n        const result = await new Promise((resolve, reject) => {\n          // 构建表单数据\n          const formData = {\n            returnFullUrl: \"true\", // 请求后端返回完整URL\n            baseUrl: BASE_URL, // 提供基础URL给后端\n          };\n\n          if (options.userId) formData.userId = options.userId;\n          if (options.postId) formData.postId = options.postId;\n\n          uni.uploadFile({\n            url: fullUploadUrl,\n            filePath: filePath,\n            name: \"files\", // 与后端接口参数名对应\n            header: {\n              \"content-type\": \"multipart/form-data\",\n            },\n            formData,\n            success: (res) => {\n              if (res.statusCode === 200) {\n                try {\n                  // 解析返回的JSON字符串\n                  const data =\n                    typeof res.data === \"string\"\n                      ? JSON.parse(res.data)\n                      : res.data;\n                  resolve(data);\n                } catch (error) {\n                  reject(new Error(\"解析响应数据失败\"));\n                }\n              } else {\n                reject({\n                  statusCode: res.statusCode,\n                  message: \"上传失败\",\n                  data: res.data,\n                });\n              }\n            },\n            fail: (err) => {\n              reject({\n                statusCode: -1,\n                message: err.errMsg || \"网络异常\",\n                error: err,\n              });\n            },\n          });\n        });\n\n        // 收集上传的图片URL\n        if (result && result.code === 200 && result.data) {\n          if (result.data.imageUrls && Array.isArray(result.data.imageUrls)) {\n            // 确保URL是完整的\n            const imageUrls = result.data.imageUrls.map((url) => {\n              if (url.startsWith(\"http\")) return url;\n              return getFullUrl(url);\n            });\n            allImageUrls = [...allImageUrls, ...imageUrls];\n          }\n        }\n      } catch (error) {\n        // 继续上传下一张图片\n      }\n    }\n\n    // 如果有帖子ID，更新帖子的图片信息\n    if (options.postId && allImageUrls.length > 0) {\n      try {\n        await updatePostImages(options.postId, allImageUrls);\n      } catch (error) {\n        // 不影响主流程，继续返回上传结果\n      }\n    }\n\n    return {\n      code: 200,\n      message: \"图片上传成功\",\n      data: {\n        imageUrls: allImageUrls,\n      },\n    };\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * 更新帖子图片\n * @param {String|Number} postId 帖子ID\n * @param {Array<String>} imageUrls 图片URL数组\n * @returns {Promise} 更新结果\n */\nexport const updatePostImages = async (postId, imageUrls) => {\n  try {\n    if (!postId && postId !== 0) {\n      throw new Error(\"帖子ID不能为空\");\n    }\n\n    if (!imageUrls || !Array.isArray(imageUrls)) {\n      throw new Error(\"图片URL数组不能为空\");\n    }\n\n    const imagesStr = JSON.stringify(imageUrls);\n\n    const response = await put(`/api/posts/${postId}/images`, { imagesStr });\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * 上传帖子图片（字符串版本）\n * @param {Object} options 上传选项\n * @param {Array<String>} options.filePaths 本地文件路径数组\n * @param {String} options.imagesStr 现有图片URL字符串（多个URL用\"||\"分隔，可选）\n * @param {String} options.userId 用户ID（可选）\n * @param {String|Number} options.postId 帖子ID（可选，关联到特定帖子）\n * @param {Function} options.onProgress 上传进度回调函数（可选）\n * @returns {Promise} 上传结果，包含合并后的图片URL字符串和URL数组\n */\nexport const uploadPostImagesString = async (options = {}) => {\n  try {\n    if (\n      !options.filePaths ||\n      !Array.isArray(options.filePaths) ||\n      options.filePaths.length === 0\n    ) {\n      throw new Error(\"文件路径数组不能为空\");\n    }\n\n    // 导入BASE_URL以构建完整URL\n    const { BASE_URL, getFullUrl } = require(\"./config\");\n    const fullUploadUrl = BASE_URL + \"/api/upload/post/images/string\";\n\n    // 顺序上传图片，保证imagesStr的积累效果\n    let currentImagesStr = options.imagesStr || \"\";\n    let allImageUrls = [];\n    let newImageUrls = [];\n\n    for (const filePath of options.filePaths) {\n      try {\n        const result = await new Promise((resolve, reject) => {\n          // 构建表单数据\n          const formData = {\n            returnFullUrl: \"true\", // 请求后端返回完整URL\n            baseUrl: BASE_URL, // 提供基础URL给后端\n          };\n\n          if (options.userId) formData.userId = options.userId;\n          if (options.postId) formData.postId = options.postId;\n          if (currentImagesStr) formData.imagesStr = currentImagesStr;\n\n          uni.uploadFile({\n            url: fullUploadUrl, // 使用完整URL\n            filePath: filePath,\n            name: \"files\", // 与后端接口参数名对应\n            header: {\n              \"content-type\": \"multipart/form-data\",\n            },\n            formData,\n            success: (res) => {\n              if (res.statusCode === 200) {\n                try {\n                  // 解析返回的JSON字符串\n                  const data =\n                    typeof res.data === \"string\"\n                      ? JSON.parse(res.data)\n                      : res.data;\n                  resolve(data);\n                } catch (error) {\n                  reject(new Error(\"解析响应数据失败\"));\n                }\n              } else {\n                reject({\n                  statusCode: res.statusCode,\n                  message: \"上传失败\",\n                  data: res.data,\n                });\n              }\n            },\n            fail: (err) => {\n              reject({\n                statusCode: -1,\n                message: err.errMsg || \"网络异常\",\n                error: err,\n              });\n            },\n          });\n        });\n\n        // 更新当前的imagesStr，用于下一次上传\n        if (result && result.code === 200 && result.data) {\n          currentImagesStr = result.data.imagesStr || currentImagesStr;\n\n          // 更新图片URL数组\n          if (result.data.imageUrls && Array.isArray(result.data.imageUrls)) {\n            allImageUrls = result.data.imageUrls;\n          }\n\n          // 获取新上传的图片URL\n          if (\n            result.data.newImageUrls &&\n            Array.isArray(result.data.newImageUrls)\n          ) {\n            newImageUrls = [...newImageUrls, ...result.data.newImageUrls];\n          }\n        }\n      } catch (error) {\n        // 继续上传下一张图片\n      }\n    }\n\n    // 如果有帖子ID，更新帖子的图片信息\n    if (\n      options.postId &&\n      currentImagesStr &&\n      currentImagesStr !== options.imagesStr\n    ) {\n      try {\n        await updatePostImagesString(options.postId, currentImagesStr);\n      } catch (error) {\n        // 不影响主流程，继续返回上传结果\n      }\n    }\n\n    // 确保返回的图片URL是完整的URL\n    const ensureFullUrls = (urls) => {\n      if (!Array.isArray(urls)) return [];\n      return urls.map((url) => {\n        if (url.startsWith(\"http\")) return url;\n        return getFullUrl(url);\n      });\n    };\n\n    // 返回上传结果\n    return {\n      code: 200,\n      message: \"图片上传成功\",\n      data: {\n        imagesStr: currentImagesStr,\n        imageUrls: ensureFullUrls(allImageUrls),\n        newImageUrls: ensureFullUrls(newImageUrls),\n      },\n    };\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * 更新帖子图片（字符串版本）\n * @param {String|Number} postId 帖子ID\n * @param {String} imagesStr 图片URL字符串（多个URL用\"||\"分隔）\n * @returns {Promise} 更新结果\n */\nexport const updatePostImagesString = async (postId, imagesStr) => {\n  try {\n    if (!postId && postId !== 0) {\n      throw new Error(\"帖子ID不能为空\");\n    }\n\n    if (!imagesStr || typeof imagesStr !== \"string\") {\n      throw new Error(\"图片URL字符串不能为空\");\n    }\n\n    const response = await put(`/api/posts/${postId}/images/string`, {\n      imagesStr,\n    });\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n"],"names":["get","post","put","del","uni"],"mappings":"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"}