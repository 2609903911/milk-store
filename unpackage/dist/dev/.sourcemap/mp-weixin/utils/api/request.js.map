{"version":3,"file":"request.js","sources":["utils/api/request.js"],"sourcesContent":["// API请求工具\n\nimport { BASE_URL, TIMEOUT, REQUEST_METHODS } from \"./config\";\n\n/**\n * 通用请求函数\n * @param {Object} options 请求配置\n * @returns {Promise} 请求Promise\n */\nexport const request = (options) => {\n  return new Promise((resolve, reject) => {\n    // 记录请求信息\n\n    uni.request({\n      url: options.url.startsWith(\"http\")\n        ? options.url\n        : BASE_URL + options.url,\n      method: options.method || REQUEST_METHODS.GET,\n      data: options.data || {},\n      header: options.header || {},\n      timeout: options.timeout || TIMEOUT,\n      success: (res) => {\n        // 记录响应信息\n\n        // 请求成功\n        if (res.statusCode >= 200 && res.statusCode < 300) {\n          resolve(res.data);\n        } else {\n          // HTTP错误\n          reject({\n            statusCode: res.statusCode,\n            message: res.data?.message || res.data?.error || \"请求失败\",\n            data: res.data,\n          });\n        }\n      },\n      fail: (err) => {\n        // 网络错误等\n        reject({\n          statusCode: -1,\n          message: err.errMsg || \"网络异常\",\n          error: err,\n        });\n      },\n    });\n  });\n};\n\n/**\n * GET请求\n * @param {String} url 请求URL\n * @param {Object} params URL参数\n * @param {Object} options 其他选项\n * @returns {Promise} 请求Promise\n */\nexport const get = (url, params = {}, options = {}) => {\n  // 处理GET参数\n  let requestUrl = url;\n  const queryParams = Object.keys(params)\n    .map((key) => {\n      return `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`;\n    })\n    .join(\"&\");\n\n  if (queryParams) {\n    requestUrl += (url.includes(\"?\") ? \"&\" : \"?\") + queryParams;\n  }\n\n  return request({\n    url: requestUrl,\n    method: REQUEST_METHODS.GET,\n    ...options,\n  });\n};\n\n/**\n * POST请求\n * @param {String} url 请求URL\n * @param {Object} data 请求数据\n * @param {Object} options 其他选项\n * @returns {Promise} 请求Promise\n */\nexport const post = (url, data = {}, options = {}) => {\n  // 确保userId是字符串类型\n  if (data.userId !== undefined && data.userId !== null) {\n    data.userId = String(data.userId);\n  }\n\n  // 构建请求选项\n  const requestOptions = {\n    url,\n    method: REQUEST_METHODS.POST,\n    data,\n    ...options,\n  };\n\n  // 如果有userId但不在data中，添加到URL参数\n  if (options.userId && !data.userId) {\n    const separator = url.includes(\"?\") ? \"&\" : \"?\";\n    requestOptions.url = `${url}${separator}userId=${options.userId}`;\n  }\n\n  return request(requestOptions);\n};\n\n/**\n * PUT请求\n * @param {String} url 请求URL\n * @param {Object} data 请求数据\n * @param {Object} options 其他选项\n * @returns {Promise} 请求Promise\n */\nexport const put = (url, data = {}, options = {}) => {\n  return request({\n    url,\n    method: REQUEST_METHODS.PUT,\n    data,\n    ...options,\n  });\n};\n\n/**\n * DELETE请求\n * @param {String} url 请求URL\n * @param {Object} params URL参数\n * @param {Object} options 其他选项\n * @returns {Promise} 请求Promise\n */\nexport const del = (url, params = {}, options = {}) => {\n  // 处理DELETE参数\n  let requestUrl = url;\n  const queryParams = Object.keys(params)\n    .map((key) => {\n      return `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`;\n    })\n    .join(\"&\");\n\n  if (queryParams) {\n    requestUrl += (url.includes(\"?\") ? \"&\" : \"?\") + queryParams;\n  }\n\n  return request({\n    url: requestUrl,\n    method: REQUEST_METHODS.DELETE,\n    ...options,\n  });\n};\n"],"names":["uni","BASE_URL","REQUEST_METHODS","TIMEOUT"],"mappings":"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"}