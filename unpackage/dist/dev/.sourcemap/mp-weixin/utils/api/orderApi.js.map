{"version":3,"file":"orderApi.js","sources":["utils/api/orderApi.js"],"sourcesContent":["/**\r\n * 订单API模块\r\n * 提供订单相关的API接口\r\n */\r\nimport { request } from './request';\r\nimport { API_PATHS } from './config';\r\nimport { userState } from '../userState';\r\nimport { mockApi } from '../mockApi';\r\n\r\n/**\r\n * 获取用户所有订单\r\n * @param {String} userId 用户ID\r\n * @returns {Promise} 订单数据列表\r\n */\r\nexport const fetchUserOrders = async (userId) => {\r\n  console.log('调用fetchUserOrders API, userId:', userId);\r\n  try {\r\n    // 调用后端API\r\n    const response = await request({\r\n      url: `/api/orders/user/${userId}`,\r\n      method: 'GET'\r\n    });\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('获取用户订单API错误:', error);\r\n    // 使用Mock数据作为替代\r\n    return mockApi.getUserOrders(userId);\r\n  }\r\n};\r\n\r\n/**\r\n * 获取用户特定状态的订单\r\n * @param {String} userId 用户ID\r\n * @param {String} status 订单状态\r\n * @returns {Promise} 订单数据列表\r\n */\r\nexport const fetchUserOrdersByStatus = async (userId, status) => {\r\n  try {\r\n    const result = await request({\r\n      url: `${API_PATHS.ORDERS_BY_USER}/${userId}/status/${status}`,\r\n      method: 'GET'\r\n    });\r\n    \r\n    if (result.code === 200 && result.data) {\r\n      return result.data;\r\n    }\r\n    return [];\r\n  } catch (error) {\r\n    console.error(`获取用户${status}状态订单失败:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * 创建订单\r\n * @param {Object} orderData 订单数据\r\n * @returns {Promise} 创建的订单数据\r\n */\r\nexport const createOrder = async (orderData) => {\r\n  console.log('调用createOrder API:', orderData);\r\n  try {\r\n    // 调用后端API\r\n    const response = await request({\r\n      url: '/api/orders',\r\n      method: 'POST',\r\n      data: orderData\r\n    });\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('创建订单API错误:', error);\r\n    // 使用Mock数据作为替代\r\n    return mockApi.createOrder(orderData);\r\n  }\r\n};\r\n\r\n/**\r\n * 根据ID获取订单详情\r\n * @param {String} orderId 订单ID\r\n * @returns {Promise} 订单详情数据\r\n */\r\nexport const fetchOrderById = async (orderId) => {\r\n  console.log('调用fetchOrderById API, orderId:', orderId);\r\n  try {\r\n    // 调用后端API\r\n    const response = await request({\r\n      url: `/api/orders/${orderId}`,\r\n      method: 'GET'\r\n    });\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('获取订单详情API错误:', error);\r\n    // 使用Mock数据作为替代\r\n    return mockApi.getOrderById(orderId);\r\n  }\r\n};\r\n\r\n/**\r\n * 取消订单\r\n * @param {String} orderId 订单ID\r\n * @returns {Promise} 操作结果\r\n */\r\nexport const cancelOrder = async (orderId) => {\r\n  console.log('调用cancelOrder API, orderId:', orderId);\r\n  try {\r\n    // 调用后端API\r\n    const response = await request({\r\n      url: `/api/orders/${orderId}/cancel`,\r\n      method: 'PUT'\r\n    });\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('取消订单API错误:', error);\r\n    // 使用Mock数据作为替代\r\n    return mockApi.cancelOrder(orderId);\r\n  }\r\n};\r\n\r\n/**\r\n * 支付订单\r\n * @param {String} orderId 订单ID\r\n * @param {String} paymentMethod 支付方式\r\n * @returns {Promise} 操作结果\r\n */\r\nexport const payOrder = async (orderId, paymentMethod) => {\r\n  try {\r\n    const result = await request({\r\n      url: `${API_PATHS.ORDER_BY_ID}/${orderId}/pay`,\r\n      method: 'PUT',\r\n      data: { paymentMethod }\r\n    });\r\n    \r\n    if (result.code === 200) {\r\n      return result.data || { success: true };\r\n    }\r\n    \r\n    throw new Error(result.message || '支付订单失败');\r\n  } catch (error) {\r\n    console.error(`支付订单${orderId}失败:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * 完成订单\r\n * @param {String} orderId 订单ID\r\n * @returns {Promise} 操作结果\r\n */\r\nexport const completeOrder = async (orderId) => {\r\n  try {\r\n    const result = await request({\r\n      url: `${API_PATHS.ORDER_BY_ID}/${orderId}/complete`,\r\n      method: 'PUT'\r\n    });\r\n    \r\n    if (result.code === 200) {\r\n      return result.data || { success: true };\r\n    }\r\n    \r\n    throw new Error(result.message || '完成订单失败');\r\n  } catch (error) {\r\n    console.error(`完成订单${orderId}失败:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * 删除订单\r\n * @param {String} orderId 订单ID\r\n * @returns {Promise} 操作结果\r\n */\r\nexport const deleteOrder = async (orderId) => {\r\n  console.log('调用deleteOrder API, orderId:', orderId);\r\n  try {\r\n    // 调用后端API\r\n    const response = await request({\r\n      url: `/api/orders/${orderId}`,\r\n      method: 'DELETE'\r\n    });\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('删除订单API错误:', error);\r\n    // 使用Mock数据作为替代\r\n    return mockApi.deleteOrder(orderId);\r\n  }\r\n};\r\n\r\n// Mock数据函数实现\r\n// -------------------------------\r\n\r\n// Mock - 创建订单\r\nconst mockCreateOrder = (orderData) => {\r\n  // 生成订单ID\r\n  const orderId = `order_${Date.now()}_${Math.floor(Math.random() * 1000)}`;\r\n  \r\n  // 创建订单记录\r\n  const order = {\r\n    orderId: orderId,\r\n    userId: orderData.userId,\r\n    orderStatus: 'pending', // 初始状态为待支付\r\n    totalAmount: orderData.totalAmount,\r\n    discountAmount: orderData.discountAmount,\r\n    actualAmount: orderData.actualAmount,\r\n    couponId: orderData.couponId,\r\n    deliveryType: orderData.deliveryType,\r\n    storeName: orderData.storeName,\r\n    storeAddress: orderData.storeAddress,\r\n    contactName: orderData.contactName,\r\n    contactPhone: orderData.contactPhone,\r\n    deliveryAddress: orderData.deliveryAddress,\r\n    orderItems: orderData.orderItems,\r\n    createTime: Date.now(),\r\n    updateTime: Date.now()\r\n  };\r\n  \r\n  // 保存到localStorage\r\n  mockApi.saveOrderToStorage(order);\r\n  \r\n  return order;\r\n};\r\n\r\n// Mock - 获取用户订单列表\r\nconst mockGetUserOrders = (userId) => {\r\n  // 从localStorage获取所有订单\r\n  const allOrders = mockApi.getAllOrdersFromStorage();\r\n  \r\n  // 过滤出当前用户的订单\r\n  const userOrders = allOrders.filter(order => order.userId === userId);\r\n  \r\n  // 按创建时间倒序排序\r\n  userOrders.sort((a, b) => b.createTime - a.createTime);\r\n  \r\n  console.log('Mock获取用户订单:', userOrders);\r\n  return userOrders;\r\n};\r\n\r\n// Mock - 获取订单详情\r\nconst mockGetOrderById = (orderId) => {\r\n  // 从localStorage获取所有订单\r\n  const allOrders = mockApi.getAllOrdersFromStorage();\r\n  \r\n  // 查找指定订单\r\n  const order = allOrders.find(order => order.orderId === orderId);\r\n  \r\n  console.log('Mock获取订单详情:', order);\r\n  return order || null;\r\n};\r\n\r\n// Mock - 取消订单\r\nconst mockCancelOrder = (orderId) => {\r\n  // 从localStorage获取所有订单\r\n  const allOrders = mockApi.getAllOrdersFromStorage();\r\n  \r\n  // 查找指定订单索引\r\n  const orderIndex = allOrders.findIndex(order => order.orderId === orderId);\r\n  \r\n  if (orderIndex !== -1) {\r\n    // 更新订单状态\r\n    allOrders[orderIndex].orderStatus = 'cancelled';\r\n    allOrders[orderIndex].updateTime = Date.now();\r\n    \r\n    // 保存更新后的订单列表\r\n    mockApi.saveAllOrdersToStorage(allOrders);\r\n    \r\n    console.log('Mock取消订单成功:', orderId);\r\n    return true;\r\n  }\r\n  \r\n  console.log('Mock取消订单失败: 订单不存在', orderId);\r\n  return false;\r\n};\r\n\r\n// Mock - 删除订单\r\nconst mockDeleteOrder = (orderId) => {\r\n  // 从localStorage获取所有订单\r\n  const allOrders = mockApi.getAllOrdersFromStorage();\r\n  \r\n  // 查找指定订单索引\r\n  const orderIndex = allOrders.findIndex(order => order.orderId === orderId);\r\n  \r\n  if (orderIndex !== -1) {\r\n    // 从数组中移除订单\r\n    allOrders.splice(orderIndex, 1);\r\n    \r\n    // 保存更新后的订单列表\r\n    mockApi.saveAllOrdersToStorage(allOrders);\r\n    \r\n    console.log('Mock删除订单成功:', orderId);\r\n    return true;\r\n  }\r\n  \r\n  console.log('Mock删除订单失败: 订单不存在', orderId);\r\n  return false;\r\n};\r\n\r\n// 辅助函数 - 将订单保存到localStorage\r\nconst saveOrderToStorage = (order) => {\r\n  // 获取现有订单列表\r\n  const orders = mockApi.getAllOrdersFromStorage();\r\n  \r\n  // 添加新订单\r\n  orders.push(order);\r\n  \r\n  // 保存到localStorage\r\n  mockApi.saveAllOrdersToStorage(orders);\r\n};\r\n\r\n// 辅助函数 - 从localStorage获取所有订单\r\nconst getAllOrdersFromStorage = () => {\r\n  try {\r\n    const ordersStr = localStorage.getItem('milkstore_orders');\r\n    return ordersStr ? JSON.parse(ordersStr) : [];\r\n  } catch (error) {\r\n    console.error('解析订单数据失败:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// 辅助函数 - 将所有订单保存到localStorage\r\nconst saveAllOrdersToStorage = (orders) => {\r\n  try {\r\n    localStorage.setItem('milkstore_orders', JSON.stringify(orders));\r\n  } catch (error) {\r\n    console.error('保存订单数据失败:', error);\r\n  }\r\n}; "],"names":["uni","request","mockApi","API_PATHS"],"mappings":"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"}