{"version":3,"file":"orderApi.js","sources":["utils/api/orderApi.js"],"sourcesContent":["/**\n * 订单API模块\n * 提供订单相关的API接口\n */\nimport { request } from \"./request\";\nimport { API_PATHS } from \"./config\";\nimport { userState } from \"../userState\";\nimport { mockApi } from \"../mockApi\";\n\n/**\n * 获取用户所有订单\n * @param {String} userId 用户ID\n * @returns {Promise} 订单数据列表\n */\nexport const fetchUserOrders = async (userId) => {\n  try {\n    // 调用后端API\n    const response = await request({\n      url: `/api/orders/user/${userId}`,\n      method: \"GET\",\n    });\n\n    return response.data;\n  } catch (error) {\n    // 使用Mock数据作为替代\n    return mockApi.getUserOrders(userId);\n  }\n};\n\n/**\n * 获取用户特定状态的订单\n * @param {String} userId 用户ID\n * @param {String} status 订单状态\n * @returns {Promise} 订单数据列表\n */\nexport const fetchUserOrdersByStatus = async (userId, status) => {\n  try {\n    const result = await request({\n      url: `${API_PATHS.ORDERS_BY_USER}/${userId}/status/${status}`,\n      method: \"GET\",\n    });\n\n    if (result.code === 200 && result.data) {\n      return result.data;\n    }\n    return [];\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * 创建订单\n * @param {Object} orderData 订单数据\n * @returns {Promise} 创建的订单数据\n */\nexport const createOrder = async (orderData) => {\n  try {\n    // 调用后端API\n    const response = await request({\n      url: \"/api/orders\",\n      method: \"POST\",\n      data: orderData,\n    });\n\n    // 检查响应格式并提取订单数据\n    let orderResult = null;\n\n    if (response && response.data) {\n      // 后端返回了嵌套的数据结构\n      orderResult = response.data;\n    } else if (response && response.code === 200) {\n      // 返回了标准成功响应\n      orderResult = response;\n    } else if (response) {\n      // 直接返回了订单数据\n      orderResult = response;\n    }\n\n    // 如果没有订单ID，确保创建一个\n    if (orderResult && !orderResult.orderId) {\n      // 使用提交的数据生成订单ID\n      orderResult.orderId = `order_${Date.now()}_${Math.floor(\n        Math.random() * 10000\n      )}`;\n    }\n\n    // 如果依然没有可用结果，创建一个最小订单对象\n    if (!orderResult) {\n      orderResult = {\n        orderId: `order_${Date.now()}_${Math.floor(Math.random() * 10000)}`,\n        ...orderData,\n        createdTime: new Date().toISOString(),\n      };\n    }\n\n    return orderResult;\n  } catch (error) {\n    // 创建一个包含必要信息的最小订单对象\n    const fallbackOrder = {\n      orderId: `order_${Date.now()}_${Math.floor(Math.random() * 10000)}`,\n      ...orderData,\n      createdTime: new Date().toISOString(),\n      error: error.message || \"创建订单失败\",\n    };\n    return fallbackOrder;\n  }\n};\n\n/**\n * 根据ID获取订单详情\n * @param {String} orderId 订单ID\n * @returns {Promise} 订单详情数据\n */\nexport const fetchOrderById = async (orderId) => {\n  try {\n    // 调用后端API\n    const response = await request({\n      url: `/api/orders/${orderId}`,\n      method: \"GET\",\n    });\n\n    return response.data;\n  } catch (error) {\n    // 使用Mock数据作为替代\n    return mockApi.getOrderById(orderId);\n  }\n};\n\n/**\n * 取消订单\n * @param {String} orderId 订单ID\n * @returns {Promise} 操作结果\n */\nexport const cancelOrder = async (orderId) => {\n  try {\n    // 调用后端API\n    const response = await request({\n      url: `/api/orders/${orderId}/cancel`,\n      method: \"PUT\",\n    });\n\n    return response.data;\n  } catch (error) {\n    // 使用Mock数据作为替代\n    return mockApi.cancelOrder(orderId);\n  }\n};\n\n/**\n * 支付订单\n * @param {String} orderId 订单ID\n * @param {String} paymentMethod 支付方式\n * @returns {Promise} 操作结果\n */\nexport const payOrder = async (orderId, paymentMethod) => {\n  try {\n    const result = await request({\n      url: `${API_PATHS.ORDER_BY_ID}/${orderId}/pay`,\n      method: \"PUT\",\n      data: { paymentMethod },\n    });\n\n    if (result.code === 200) {\n      return result.data || { success: true };\n    }\n\n    throw new Error(result.message || \"支付订单失败\");\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * 完成订单\n * @param {String} orderId 订单ID\n * @returns {Promise} 操作结果\n */\nexport const completeOrder = async (orderId) => {\n  try {\n    const result = await request({\n      url: `${API_PATHS.ORDER_BY_ID}/${orderId}/complete`,\n      method: \"PUT\",\n    });\n\n    if (result.code === 200) {\n      return result.data || { success: true };\n    }\n\n    throw new Error(result.message || \"完成订单失败\");\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * 删除订单\n * @param {String} orderId 订单ID\n * @returns {Promise} 操作结果\n */\nexport const deleteOrder = async (orderId) => {\n  try {\n    // 调用后端API\n    const response = await request({\n      url: `/api/orders/${orderId}`,\n      method: \"DELETE\",\n    });\n\n    return response.data;\n  } catch (error) {\n    // 使用Mock数据作为替代\n    return mockApi.deleteOrder(orderId);\n  }\n};\n\n// 更新优惠券使用状态\nexport const updateCouponUsed = async (couponId, orderId) => {\n  // 确保couponId是数字\n  const numericCouponId = Number(couponId);\n\n  try {\n    // 添加完整URL日志\n    const apiUrl = `/api/user-coupons/${numericCouponId}/use?orderId=${encodeURIComponent(\n      orderId\n    )}`;\n\n    // 调用后端API - 作为URL参数传递orderId，而不是请求体\n    const response = await request({\n      url: apiUrl,\n      method: \"PUT\",\n    });\n\n    return response.data || response;\n  } catch (error) {\n    // 捕获错误但不抛出，让流程继续\n    return { success: false, message: error.message };\n  }\n};\n\n// 获取优惠券详情\nexport const getCouponById = async (couponId) => {\n  try {\n    // 调用后端API\n    const response = await request({\n      url: `/api/user-coupons/${couponId}`,\n      method: \"GET\",\n    });\n\n    return response.data;\n  } catch (error) {\n    return null;\n  }\n};\n\n// Mock数据函数实现\n// -------------------------------\n\n// Mock - 创建订单\nconst mockCreateOrder = (orderData) => {\n  // 生成订单ID\n  const orderId = `order_${Date.now()}_${Math.floor(Math.random() * 1000)}`;\n\n  // 创建订单记录\n  const order = {\n    orderId: orderId,\n    userId: orderData.userId,\n    orderStatus: \"pending\", // 初始状态为待支付\n    totalAmount: orderData.totalAmount,\n    discountAmount: orderData.discountAmount,\n    actualAmount: orderData.actualAmount,\n    couponId: orderData.couponId,\n    deliveryType: orderData.deliveryType,\n    storeName: orderData.storeName,\n    storeAddress: orderData.storeAddress,\n    contactName: orderData.contactName,\n    contactPhone: orderData.contactPhone,\n    deliveryAddress: orderData.deliveryAddress,\n    orderItems: orderData.orderItems,\n    createTime: Date.now(),\n    updateTime: Date.now(),\n  };\n\n  // 保存到localStorage\n  mockApi.saveOrderToStorage(order);\n\n  return order;\n};\n\n// Mock - 获取用户订单列表\nconst mockGetUserOrders = (userId) => {\n  // 从localStorage获取所有订单\n  const allOrders = mockApi.getAllOrdersFromStorage();\n\n  // 过滤出当前用户的订单\n  const userOrders = allOrders.filter((order) => order.userId === userId);\n\n  // 按创建时间倒序排序\n  userOrders.sort((a, b) => b.createTime - a.createTime);\n\n  return userOrders;\n};\n\n// Mock - 获取订单详情\nconst mockGetOrderById = (orderId) => {\n  // 从localStorage获取所有订单\n  const allOrders = mockApi.getAllOrdersFromStorage();\n\n  // 查找指定订单\n  const order = allOrders.find((order) => order.orderId === orderId);\n\n  return order || null;\n};\n\n// Mock - 取消订单\nconst mockCancelOrder = (orderId) => {\n  // 从localStorage获取所有订单\n  const allOrders = mockApi.getAllOrdersFromStorage();\n\n  // 查找指定订单索引\n  const orderIndex = allOrders.findIndex((order) => order.orderId === orderId);\n\n  if (orderIndex !== -1) {\n    // 更新订单状态\n    allOrders[orderIndex].orderStatus = \"cancelled\";\n    allOrders[orderIndex].updateTime = Date.now();\n\n    // 保存更新后的订单列表\n    mockApi.saveAllOrdersToStorage(allOrders);\n\n    return true;\n  }\n\n  return false;\n};\n\n// Mock - 删除订单\nconst mockDeleteOrder = (orderId) => {\n  // 从localStorage获取所有订单\n  const allOrders = mockApi.getAllOrdersFromStorage();\n\n  // 查找指定订单索引\n  const orderIndex = allOrders.findIndex((order) => order.orderId === orderId);\n\n  if (orderIndex !== -1) {\n    // 从数组中移除订单\n    allOrders.splice(orderIndex, 1);\n\n    // 保存更新后的订单列表\n    mockApi.saveAllOrdersToStorage(allOrders);\n\n    return true;\n  }\n\n  return false;\n};\n\n// 辅助函数 - 将订单保存到localStorage\nconst saveOrderToStorage = (order) => {\n  // 获取现有订单列表\n  const orders = mockApi.getAllOrdersFromStorage();\n\n  // 添加新订单\n  orders.push(order);\n\n  // 保存到localStorage\n  mockApi.saveAllOrdersToStorage(orders);\n};\n\n// 辅助函数 - 从localStorage获取所有订单\nconst getAllOrdersFromStorage = () => {\n  try {\n    const ordersStr = localStorage.getItem(\"milkstore_orders\");\n    return ordersStr ? JSON.parse(ordersStr) : [];\n  } catch (error) {\n    return [];\n  }\n};\n\n// 辅助函数 - 将所有订单保存到localStorage\nconst saveAllOrdersToStorage = (orders) => {\n  try {\n    localStorage.setItem(\"milkstore_orders\", JSON.stringify(orders));\n  } catch (error) {}\n};\n"],"names":["request","mockApi","API_PATHS"],"mappings":"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"}