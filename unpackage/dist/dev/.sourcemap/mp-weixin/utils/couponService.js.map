{"version":3,"file":"couponService.js","sources":["utils/couponService.js"],"sourcesContent":["/**\r\n * 优惠券服务模块\r\n * 提供优惠券的发放、领取、使用和计算折扣等功能\r\n */\r\nimport { userState, updateUserState } from './userState';\r\nimport { getUserInfo, updateUserInfo } from './userStorage';\r\nimport { \r\n  COUPON_TYPES, \r\n  COUPON_SCOPES, \r\n  COUPON_STATUS, \r\n  calculateCouponStatus,\r\n  createCoupon,\r\n  createDiscountCoupon,\r\n  createCashCoupon,\r\n  createFreeCoupon,\r\n  createBuyOneGetOneCoupon,\r\n  createSpecialPriceCoupon\r\n} from './couponModel';\r\n\r\n/**\r\n * 获取用户优惠券\r\n * @returns {Array} 用户优惠券列表\r\n */\r\nexport const getUserCoupons = () => {\r\n  return userState.coupons || [];\r\n};\r\n\r\n/**\r\n * 根据状态获取用户优惠券\r\n * @param {String} status 优惠券状态，不传则获取所有\r\n * @returns {Array} 过滤后的优惠券列表\r\n */\r\nexport const getCouponsByStatus = (status) => {\r\n  const coupons = getUserCoupons();\r\n  if (!status) return coupons;\r\n  \r\n  // 更新每个优惠券的最新状态\r\n  return coupons.filter(coupon => {\r\n    const currentStatus = calculateCouponStatus(coupon);\r\n    return currentStatus === status;\r\n  });\r\n};\r\n\r\n/**\r\n * 获取可用优惠券\r\n * @param {Object} orderInfo 订单信息\r\n * @returns {Array} 可用优惠券列表\r\n */\r\nexport const getAvailableCoupons = (orderInfo) => {\r\n  const validCoupons = getCouponsByStatus(COUPON_STATUS.VALID);\r\n  \r\n  if (!orderInfo) return validCoupons;\r\n  \r\n  return validCoupons.filter(coupon => {\r\n    // 检查最低消费条件\r\n    if (coupon.minOrderAmount > 0 && orderInfo.totalAmount < coupon.minOrderAmount) {\r\n      return false;\r\n    }\r\n    \r\n    // 检查使用范围\r\n    switch (coupon.scope) {\r\n      case COUPON_SCOPES.ALL:\r\n        return true;\r\n        \r\n      case COUPON_SCOPES.CATEGORY:\r\n        // 检查订单中是否包含指定分类商品\r\n        return orderInfo.items.some(item => \r\n          coupon.scopeIds.includes(item.categoryId)\r\n        );\r\n        \r\n      case COUPON_SCOPES.PRODUCT:\r\n        // 检查订单中是否包含指定商品\r\n        return orderInfo.items.some(item => \r\n          coupon.scopeIds.includes(item.productId)\r\n        );\r\n        \r\n      case COUPON_SCOPES.NEW_USER:\r\n        // 检查是否为新用户\r\n        return userState.createTime && \r\n               (Date.now() - userState.createTime < 7 * 24 * 60 * 60 * 1000); // 7天内视为新用户\r\n        \r\n      case COUPON_SCOPES.MEMBER:\r\n        // 检查是否为会员\r\n        return userState.memberLevel > 0;\r\n        \r\n      default:\r\n        return false;\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * 计算优惠券折扣金额\r\n * @param {Object} coupon 优惠券对象\r\n * @param {Object} orderInfo 订单信息\r\n * @returns {Number} 折扣金额\r\n */\r\nexport const calculateDiscount = (coupon, orderInfo) => {\r\n  if (!coupon || !orderInfo) return 0;\r\n  \r\n  // 获取最新状态，检查是否可用\r\n  const status = calculateCouponStatus(coupon);\r\n  if (status !== COUPON_STATUS.VALID) return 0;\r\n  \r\n  // 检查最低消费\r\n  if (coupon.minOrderAmount > 0 && orderInfo.totalAmount < coupon.minOrderAmount) {\r\n    return 0;\r\n  }\r\n  \r\n  // 根据不同类型计算折扣\r\n  switch (coupon.type) {\r\n    case COUPON_TYPES.DISCOUNT:\r\n      // 折扣券，如8折\r\n      return parseFloat((orderInfo.totalAmount * (1 - coupon.value / 10)).toFixed(2));\r\n      \r\n    case COUPON_TYPES.CASH:\r\n      // 现金券，如满50减10\r\n      return Math.min(coupon.value, orderInfo.totalAmount);\r\n      \r\n    case COUPON_TYPES.FREE:\r\n      // 免单券，可能有最高限额\r\n      return coupon.value > 0 ? Math.min(coupon.value, orderInfo.totalAmount) : orderInfo.totalAmount;\r\n      \r\n    case COUPON_TYPES.BUY_ONE_GET_ONE:\r\n      // 买一赠一券，计算赠送商品的价值\r\n      let discount = 0;\r\n      // 查找可用于买一赠一的商品\r\n      orderInfo.items.forEach(item => {\r\n        if (coupon.scopeIds.length === 0 || coupon.scopeIds.includes(item.productId)) {\r\n          if (item.quantity >= 2) {\r\n            // 每两件商品中有一件是免费的\r\n            const freeQuantity = Math.floor(item.quantity / 2);\r\n            discount += freeQuantity * item.price;\r\n          }\r\n        }\r\n      });\r\n      return discount;\r\n      \r\n    case COUPON_TYPES.SPECIAL_PRICE:\r\n      // 特价券，将指定商品价格变为特价\r\n      let specialDiscount = 0;\r\n      orderInfo.items.forEach(item => {\r\n        if (coupon.scopeIds.includes(item.productId)) {\r\n          // 原价与特价的差额\r\n          const itemDiscount = (item.price - coupon.value) * item.quantity;\r\n          if (itemDiscount > 0) {\r\n            specialDiscount += itemDiscount;\r\n          }\r\n        }\r\n      });\r\n      return specialDiscount;\r\n      \r\n    case COUPON_TYPES.SHIPPING:\r\n      // 免运费券\r\n      return orderInfo.shippingFee || 0;\r\n      \r\n    default:\r\n      return 0;\r\n  }\r\n};\r\n\r\n/**\r\n * 添加优惠券到用户账户\r\n * @param {Object} coupon 优惠券对象\r\n * @returns {Boolean} 是否成功添加\r\n */\r\nexport const addCouponToUser = (coupon) => {\r\n  try {\r\n    if (!coupon || !coupon.id) return false;\r\n    \r\n    // 获取用户当前优惠券列表\r\n    const currentCoupons = userState.coupons || [];\r\n    \r\n    // 检查优惠券是否已存在\r\n    if (currentCoupons.some(c => c.id === coupon.id)) {\r\n      console.warn('优惠券已存在', coupon.id);\r\n      return false;\r\n    }\r\n    \r\n    // 添加新优惠券\r\n    const newCoupons = [...currentCoupons, coupon];\r\n    \r\n    // 更新用户状态\r\n    const updated = updateUserState({ coupons: newCoupons });\r\n    \r\n    return updated;\r\n  } catch (error) {\r\n    console.error('添加优惠券失败', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * 领取优惠券\r\n * @param {Object} coupon 优惠券对象\r\n * @returns {Object} 结果对象\r\n */\r\nexport const claimCoupon = (coupon) => {\r\n  try {\r\n    if (!coupon) {\r\n      return { success: false, message: '无效的优惠券' };\r\n    }\r\n    \r\n    // 添加领取时间标记\r\n    const couponWithClaimTime = {\r\n      ...coupon,\r\n      claimTime: Date.now()\r\n    };\r\n    \r\n    const added = addCouponToUser(couponWithClaimTime);\r\n    \r\n    if (!added) {\r\n      return { success: false, message: '领取优惠券失败' };\r\n    }\r\n    \r\n    return { success: true, message: '优惠券领取成功', coupon: couponWithClaimTime };\r\n  } catch (error) {\r\n    console.error('领取优惠券出错', error);\r\n    return { success: false, message: '领取过程中发生错误' };\r\n  }\r\n};\r\n\r\n/**\r\n * 使用优惠券\r\n * @param {String} couponId 优惠券ID\r\n * @param {Object} orderInfo 订单信息\r\n * @returns {Object} 结果对象，包含成功状态和折扣金额\r\n */\r\nexport const useCoupon = (couponId, orderInfo) => {\r\n  try {\r\n    if (!couponId || !orderInfo) {\r\n      return { success: false, message: '参数不完整', discount: 0 };\r\n    }\r\n    \r\n    // 获取用户优惠券\r\n    const userCoupons = getUserCoupons();\r\n    const couponIndex = userCoupons.findIndex(c => c.id === couponId);\r\n    \r\n    if (couponIndex === -1) {\r\n      return { success: false, message: '优惠券不存在', discount: 0 };\r\n    }\r\n    \r\n    const coupon = userCoupons[couponIndex];\r\n    \r\n    // 检查优惠券状态\r\n    const status = calculateCouponStatus(coupon);\r\n    if (status !== COUPON_STATUS.VALID) {\r\n      return { success: false, message: '优惠券已失效', discount: 0 };\r\n    }\r\n    \r\n    // 计算折扣\r\n    const discount = calculateDiscount(coupon, orderInfo);\r\n    \r\n    if (discount <= 0) {\r\n      return { success: false, message: '此订单不满足优惠券使用条件', discount: 0 };\r\n    }\r\n    \r\n    // 标记优惠券为已使用\r\n    const updatedCoupons = [...userCoupons];\r\n    updatedCoupons[couponIndex] = {\r\n      ...coupon,\r\n      status: COUPON_STATUS.USED,\r\n      usedTime: Date.now()\r\n    };\r\n    \r\n    // 更新用户状态\r\n    const updated = updateUserState({ coupons: updatedCoupons });\r\n    \r\n    if (!updated) {\r\n      return { success: false, message: '使用优惠券失败', discount: 0 };\r\n    }\r\n    \r\n    return { \r\n      success: true, \r\n      message: '优惠券使用成功', \r\n      discount,\r\n      coupon: updatedCoupons[couponIndex]\r\n    };\r\n  } catch (error) {\r\n    console.error('使用优惠券出错', error);\r\n    return { success: false, message: '使用过程中发生错误', discount: 0 };\r\n  }\r\n};\r\n\r\n/**\r\n * 生成随机优惠券\r\n * @param {String} type 优惠券类型，不传则随机生成\r\n * @returns {Object} 优惠券对象\r\n */\r\nexport const generateRandomCoupon = (type) => {\r\n  // 如果未指定类型，随机选择一种\r\n  const couponType = type || Object.values(COUPON_TYPES)[\r\n    Math.floor(Math.random() * Object.values(COUPON_TYPES).length)\r\n  ];\r\n  \r\n  // 根据类型创建不同的优惠券\r\n  switch (couponType) {\r\n    case COUPON_TYPES.DISCOUNT:\r\n      // 随机折扣率，7-9.5折\r\n      const discountRate = (Math.floor(Math.random() * 25) + 70) / 10;\r\n      return createDiscountCoupon(discountRate, Math.random() > 0.5 ? 30 : 0);\r\n      \r\n    case COUPON_TYPES.CASH:\r\n      // 随机减免金额，5-20元\r\n      const cashAmount = Math.floor(Math.random() * 16) + 5;\r\n      const minAmount = cashAmount * (Math.floor(Math.random() * 3) + 2); // 最低消费是减免金额的2-4倍\r\n      return createCashCoupon(cashAmount, minAmount);\r\n      \r\n    case COUPON_TYPES.FREE:\r\n      // 免单券，可能有最高限额\r\n      return createFreeCoupon(Math.random() > 0.7 ? 30 : 0);\r\n      \r\n    case COUPON_TYPES.BUY_ONE_GET_ONE:\r\n      // 买一赠一券\r\n      return createBuyOneGetOneCoupon();\r\n      \r\n    case COUPON_TYPES.SPECIAL_PRICE:\r\n      // 随机特价券\r\n      const productId = `product_${Math.floor(Math.random() * 100) + 1}`;\r\n      const specialPrice = Math.floor(Math.random() * 10) + 5; // 5-15元\r\n      return createSpecialPriceCoupon(productId, specialPrice);\r\n      \r\n    case COUPON_TYPES.SHIPPING:\r\n      // 免运费券\r\n      return createCoupon({\r\n        type: COUPON_TYPES.SHIPPING,\r\n        title: '免运费券',\r\n        value: 0,\r\n        description: '订单免除配送费'\r\n      });\r\n      \r\n    default:\r\n      // 默认创建折扣券\r\n      return createDiscountCoupon(8, 30);\r\n  }\r\n}; "],"names":["userState","calculateCouponStatus"],"mappings":";;;;AAuBO,MAAM,iBAAiB,MAAM;AAClC,SAAOA,gBAAS,UAAC,WAAW;AAC9B;AAOY,MAAC,qBAAqB,CAAC,WAAW;AAC5C,QAAM,UAAU;AAChB,MAAI,CAAC;AAAQ,WAAO;AAGpB,SAAO,QAAQ,OAAO,YAAU;AAC9B,UAAM,gBAAgBC,wCAAsB,MAAM;AAClD,WAAO,kBAAkB;AAAA,EAC7B,CAAG;AACH;;"}