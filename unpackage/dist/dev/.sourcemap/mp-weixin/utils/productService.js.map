{"version":3,"file":"productService.js","sources":["utils/productService.js"],"sourcesContent":["/**\r\n * 产品服务\r\n * 提供产品相关的功能\r\n */\r\n\r\n// 产品数据服务\r\nimport { productApi, categoryApi } from './api';\r\n\r\n/**\r\n * 获取产品数据（包含分类和对应产品）\r\n * @returns {Promise<Array>} 包含分类和产品的数组\r\n */\r\nexport const getProductData = async () => {\r\n  try {\r\n    // 1. 获取所有分类\r\n    const categories = await categoryApi.fetchCategories();\r\n    \r\n    // 2. 对每个分类获取对应的产品\r\n    const result = await Promise.all(\r\n      categories.map(async (category) => {\r\n        // 获取该分类下的产品\r\n        const products = await productApi.fetchProductsByCategory(category.id);\r\n        \r\n        // 转换为前端需要的格式\r\n        return {\r\n          name: category.name,\r\n          products: products.map(product => ({\r\n            id: product.id,\r\n            image: product.imageUrl || `/static/images/default-product.png`,\r\n            name: product.name,\r\n            desc: product.description,\r\n            price: product.price\r\n          }))\r\n        };\r\n      })\r\n    );\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    console.error('获取产品数据失败:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * 获取单个分类下的产品\r\n * @param {Number} categoryId 分类ID\r\n * @returns {Promise<Object>} 包含分类和产品的对象\r\n */\r\nexport const getCategoryProducts = async (categoryId) => {\r\n  try {\r\n    // 1. 获取分类信息\r\n    const category = await categoryApi.fetchCategoryById(categoryId);\r\n    if (!category) {\r\n      throw new Error('分类不存在');\r\n    }\r\n    \r\n    // 2. 获取该分类下的产品\r\n    const products = await productApi.fetchProductsByCategory(categoryId);\r\n    \r\n    // 3. 转换为前端需要的格式\r\n    return {\r\n      name: category.name,\r\n      products: products.map(product => ({\r\n        id: product.id,\r\n        image: product.imageUrl || `/static/images/default-product.png`,\r\n        name: product.name,\r\n        desc: product.description,\r\n        price: product.price\r\n      }))\r\n    };\r\n  } catch (error) {\r\n    console.error(`获取分类${categoryId}的产品失败:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * 获取默认的本地产品数据（当API请求失败时使用）\r\n * @returns {Array} 默认产品数据（最小化版本）\r\n */\r\nexport const getDefaultProductData = () => {\r\n  // 返回一个最小的默认数据，仅用于在网络故障时显示基本界面\r\n  return [\r\n    {\r\n      name: \"奶茶\",\r\n      products: [\r\n        {\r\n          image: \"/static/images/default-product.png\",\r\n          name: \"默认奶茶产品\",\r\n          desc: \"暂无产品数据，请检查网络连接\",\r\n          price: 0\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      name: \"果茶\",\r\n      products: [\r\n        {\r\n          image: \"/static/images/default-product.png\",\r\n          name: \"默认果茶产品\",\r\n          desc: \"暂无产品数据，请检查网络连接\",\r\n          price: 0\r\n        }\r\n      ]\r\n    }\r\n  ];\r\n}; "],"names":["categoryApi.fetchCategories","productApi.fetchProductsByCategory","uni"],"mappings":";;;;;AAYY,MAAC,iBAAiB,YAAY;AACxC,MAAI;AAEF,UAAM,aAAa,MAAMA,sBAAAA;AAGzB,UAAM,SAAS,MAAM,QAAQ;AAAA,MAC3B,WAAW,IAAI,OAAO,aAAa;AAEjC,cAAM,WAAW,MAAMC,qBAAAA,wBAAmC,SAAS,EAAE;AAGrE,eAAO;AAAA,UACL,MAAM,SAAS;AAAA,UACf,UAAU,SAAS,IAAI,cAAY;AAAA,YACjC,IAAI,QAAQ;AAAA,YACZ,OAAO,QAAQ,YAAY;AAAA,YAC3B,MAAM,QAAQ;AAAA,YACd,MAAM,QAAQ;AAAA,YACd,OAAO,QAAQ;AAAA,UAC3B,EAAY;AAAA,QACZ;AAAA,MACA,CAAO;AAAA,IACP;AAEI,WAAO;AAAA,EACR,SAAQ,OAAO;AACdC,kBAAc,MAAA,MAAA,SAAA,iCAAA,aAAa,KAAK;AAChC,UAAM;AAAA,EACP;AACH;AAuCY,MAAC,wBAAwB,MAAM;AAEzC,SAAO;AAAA,IACL;AAAA,MACE,MAAM;AAAA,MACN,UAAU;AAAA,QACR;AAAA,UACE,OAAO;AAAA,UACP,MAAM;AAAA,UACN,MAAM;AAAA,UACN,OAAO;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAAA,IACD;AAAA,MACE,MAAM;AAAA,MACN,UAAU;AAAA,QACR;AAAA,UACE,OAAO;AAAA,UACP,MAAM;AAAA,UACN,MAAM;AAAA,UACN,OAAO;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAAA,EACL;AACA;;;"}