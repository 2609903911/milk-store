{"version":3,"file":"productService.js","sources":["utils/productService.js"],"sourcesContent":["/**\n * 产品服务\n * 提供产品相关的功能\n */\n\n// 产品数据服务\nimport { productApi, categoryApi } from \"./api\";\n\n/**\n * 获取产品数据（包含分类和对应产品）\n * @returns {Promise<Array>} 包含分类和产品的数组\n */\nexport const getProductData = async () => {\n  try {\n    // 1. 获取所有分类\n    const categories = await categoryApi.fetchCategories();\n\n    // 2. 对每个分类获取对应的产品\n    const result = await Promise.all(\n      categories.map(async (category) => {\n        // 获取该分类下的产品\n        const products = await productApi.fetchProductsByCategory(category.id);\n\n        // 转换为前端需要的格式\n        return {\n          name: category.name,\n          products: products.map((product) => ({\n            id: product.id,\n            image: product.imageUrl || `/static/images/default-product.png`,\n            name: product.name,\n            desc: product.description,\n            price: product.price,\n          })),\n        };\n      })\n    );\n\n    return result;\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * 获取单个分类下的产品\n * @param {Number} categoryId 分类ID\n * @returns {Promise<Object>} 包含分类和产品的对象\n */\nexport const getCategoryProducts = async (categoryId) => {\n  try {\n    // 1. 获取分类信息\n    const category = await categoryApi.fetchCategoryById(categoryId);\n    if (!category) {\n      throw new Error(\"分类不存在\");\n    }\n\n    // 2. 获取该分类下的产品\n    const products = await productApi.fetchProductsByCategory(categoryId);\n\n    // 3. 转换为前端需要的格式\n    return {\n      name: category.name,\n      products: products.map((product) => ({\n        id: product.id,\n        image: product.imageUrl || `/static/images/default-product.png`,\n        name: product.name,\n        desc: product.description,\n        price: product.price,\n      })),\n    };\n  } catch (error) {\n    throw error;\n  }\n};\n\n/**\n * 获取默认的本地产品数据（当API请求失败时使用）\n * @returns {Array} 默认产品数据（最小化版本）\n */\nexport const getDefaultProductData = () => {\n  // 返回一个最小的默认数据，仅用于在网络故障时显示基本界面\n  return [\n    {\n      name: \"奶茶\",\n      products: [\n        {\n          image: \"/static/images/default-product.png\",\n          name: \"默认奶茶产品\",\n          desc: \"暂无产品数据，请检查网络连接\",\n          price: 0,\n        },\n      ],\n    },\n    {\n      name: \"果茶\",\n      products: [\n        {\n          image: \"/static/images/default-product.png\",\n          name: \"默认果茶产品\",\n          desc: \"暂无产品数据，请检查网络连接\",\n          price: 0,\n        },\n      ],\n    },\n  ];\n};\n"],"names":["categoryApi.fetchCategories","productApi.fetchProductsByCategory"],"mappings":";;;;;AAYY,MAAC,iBAAiB,YAAY;AACxC,MAAI;AAEF,UAAM,aAAa,MAAMA,sBAAAA;AAGzB,UAAM,SAAS,MAAM,QAAQ;AAAA,MAC3B,WAAW,IAAI,OAAO,aAAa;AAEjC,cAAM,WAAW,MAAMC,qBAAAA,wBAAmC,SAAS,EAAE;AAGrE,eAAO;AAAA,UACL,MAAM,SAAS;AAAA,UACf,UAAU,SAAS,IAAI,CAAC,aAAa;AAAA,YACnC,IAAI,QAAQ;AAAA,YACZ,OAAO,QAAQ,YAAY;AAAA,YAC3B,MAAM,QAAQ;AAAA,YACd,MAAM,QAAQ;AAAA,YACd,OAAO,QAAQ;AAAA,UAC3B,EAAY;AAAA,QACZ;AAAA,MACA,CAAO;AAAA,IACP;AAEI,WAAO;AAAA,EACR,SAAQ,OAAO;AACd,UAAM;AAAA,EACP;AACH;AAsCY,MAAC,wBAAwB,MAAM;AAEzC,SAAO;AAAA,IACL;AAAA,MACE,MAAM;AAAA,MACN,UAAU;AAAA,QACR;AAAA,UACE,OAAO;AAAA,UACP,MAAM;AAAA,UACN,MAAM;AAAA,UACN,OAAO;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAAA,IACD;AAAA,MACE,MAAM;AAAA,MACN,UAAU;AAAA,QACR;AAAA,UACE,OAAO;AAAA,UACP,MAAM;AAAA,UACN,MAAM;AAAA,UACN,OAAO;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAAA,EACL;AACA;;;"}