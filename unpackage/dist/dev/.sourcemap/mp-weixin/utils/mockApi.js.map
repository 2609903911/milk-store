{"version":3,"file":"mockApi.js","sources":["utils/mockApi.js"],"sourcesContent":["/**\n * Mock API - 用于在没有后端服务时模拟API请求\n */\n\nexport const mockApi = {\n  /**\n   * 创建订单\n   * @param {Object} orderData 订单数据\n   * @returns {Object} 创建的订单\n   */\n  createOrder(orderData) {\n    // 生成订单ID\n    const orderId = `order_${Date.now()}_${Math.floor(Math.random() * 1000)}`;\n\n    // 创建订单记录\n    const order = {\n      orderId: orderId,\n      userId: orderData.userId,\n      orderStatus: \"pending\", // 初始状态为待支付\n      totalAmount: orderData.totalAmount,\n      discountAmount: orderData.discountAmount,\n      actualAmount: orderData.actualAmount,\n      couponId: orderData.couponId,\n      deliveryType: orderData.deliveryType,\n      storeName: orderData.storeName,\n      storeAddress: orderData.storeAddress,\n      contactName: orderData.contactName,\n      contactPhone: orderData.contactPhone,\n      deliveryAddress: orderData.deliveryAddress,\n      orderItems: orderData.orderItems,\n      createTime: Date.now(),\n      updateTime: Date.now(),\n    };\n\n    // 保存到localStorage\n    this.saveOrderToStorage(order);\n\n    return order;\n  },\n\n  /**\n   * 获取用户订单列表\n   * @param {string} userId 用户ID\n   * @returns {Array} 用户订单列表\n   */\n  getUserOrders(userId) {\n    // 从localStorage获取所有订单\n    const allOrders = this.getAllOrdersFromStorage();\n\n    // 过滤出当前用户的订单\n    const userOrders = allOrders.filter((order) => order.userId === userId);\n\n    // 按创建时间倒序排序\n    userOrders.sort((a, b) => b.createTime - a.createTime);\n\n    return userOrders;\n  },\n\n  /**\n   * 获取订单详情\n   * @param {string} orderId 订单ID\n   * @returns {Object|null} 订单详情\n   */\n  getOrderById(orderId) {\n    // 从localStorage获取所有订单\n    const allOrders = this.getAllOrdersFromStorage();\n\n    // 查找指定订单\n    const order = allOrders.find((order) => order.orderId === orderId);\n\n    return order || null;\n  },\n\n  /**\n   * 取消订单\n   * @param {string} orderId 订单ID\n   * @returns {boolean} 操作结果\n   */\n  cancelOrder(orderId) {\n    // 从localStorage获取所有订单\n    const allOrders = this.getAllOrdersFromStorage();\n\n    // 查找指定订单索引\n    const orderIndex = allOrders.findIndex(\n      (order) => order.orderId === orderId\n    );\n\n    if (orderIndex !== -1) {\n      // 更新订单状态\n      allOrders[orderIndex].orderStatus = \"cancelled\";\n      allOrders[orderIndex].updateTime = Date.now();\n\n      // 保存更新后的订单列表\n      this.saveAllOrdersToStorage(allOrders);\n\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\n   * 删除订单\n   * @param {string} orderId 订单ID\n   * @returns {boolean} 操作结果\n   */\n  deleteOrder(orderId) {\n    // 从localStorage获取所有订单\n    const allOrders = this.getAllOrdersFromStorage();\n\n    // 查找指定订单索引\n    const orderIndex = allOrders.findIndex(\n      (order) => order.orderId === orderId\n    );\n\n    if (orderIndex !== -1) {\n      // 从数组中移除订单\n      allOrders.splice(orderIndex, 1);\n\n      // 保存更新后的订单列表\n      this.saveAllOrdersToStorage(allOrders);\n\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\n   * 将订单保存到localStorage\n   * @param {Object} order 订单对象\n   */\n  saveOrderToStorage(order) {\n    // 获取现有订单列表\n    const orders = this.getAllOrdersFromStorage();\n\n    // 添加新订单\n    orders.push(order);\n\n    // 保存到localStorage\n    this.saveAllOrdersToStorage(orders);\n  },\n\n  /**\n   * 从localStorage获取所有订单\n   * @returns {Array} 订单列表\n   */\n  getAllOrdersFromStorage() {\n    try {\n      const ordersStr = localStorage.getItem(\"milkstore_orders\");\n      return ordersStr ? JSON.parse(ordersStr) : [];\n    } catch (error) {\n      return [];\n    }\n  },\n\n  /**\n   * 将所有订单保存到localStorage\n   * @param {Array} orders 订单列表\n   */\n  saveAllOrdersToStorage(orders) {\n    try {\n      localStorage.setItem(\"milkstore_orders\", JSON.stringify(orders));\n    } catch (error) {}\n  },\n\n  /**\n   * 根据orderId支付订单（修改状态为 paid）\n   * @param {string} orderId 订单ID\n   * @returns {boolean} 操作结果\n   */\n  payOrder(orderId) {\n    // 从localStorage获取所有订单\n    const allOrders = this.getAllOrdersFromStorage();\n\n    // 查找指定订单索引\n    const orderIndex = allOrders.findIndex(\n      (order) => order.orderId === orderId\n    );\n\n    if (orderIndex !== -1) {\n      // 更新订单状态\n      allOrders[orderIndex].orderStatus = \"paid\";\n      allOrders[orderIndex].updateTime = Date.now();\n      allOrders[orderIndex].payTime = Date.now();\n\n      // 保存更新后的订单列表\n      this.saveAllOrdersToStorage(allOrders);\n\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\n   * 完成订单（修改状态为 completed）\n   * @param {string} orderId 订单ID\n   * @returns {boolean} 操作结果\n   */\n  completeOrder(orderId) {\n    // 从localStorage获取所有订单\n    const allOrders = this.getAllOrdersFromStorage();\n\n    // 查找指定订单索引\n    const orderIndex = allOrders.findIndex(\n      (order) => order.orderId === orderId\n    );\n\n    if (orderIndex !== -1) {\n      // 更新订单状态\n      allOrders[orderIndex].orderStatus = \"completed\";\n      allOrders[orderIndex].updateTime = Date.now();\n      allOrders[orderIndex].completeTime = Date.now();\n\n      // 保存更新后的订单列表\n      this.saveAllOrdersToStorage(allOrders);\n\n      return true;\n    }\n\n    return false;\n  },\n};\n"],"names":["order"],"mappings":"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"}