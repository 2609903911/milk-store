{"version":3,"file":"mockApi.js","sources":["utils/mockApi.js"],"sourcesContent":["/**\r\n * Mock API - 用于在没有后端服务时模拟API请求\r\n */\r\n\r\nexport const mockApi = {\r\n    /**\r\n     * 创建订单\r\n     * @param {Object} orderData 订单数据\r\n     * @returns {Object} 创建的订单\r\n     */\r\n    createOrder(orderData) {\r\n        // 生成订单ID\r\n        const orderId = `order_${Date.now()}_${Math.floor(Math.random() * 1000)}`\r\n        \r\n        // 创建订单记录\r\n        const order = {\r\n            orderId: orderId,\r\n            userId: orderData.userId,\r\n            orderStatus: 'pending', // 初始状态为待支付\r\n            totalAmount: orderData.totalAmount,\r\n            discountAmount: orderData.discountAmount,\r\n            actualAmount: orderData.actualAmount,\r\n            couponId: orderData.couponId,\r\n            deliveryType: orderData.deliveryType,\r\n            storeName: orderData.storeName,\r\n            storeAddress: orderData.storeAddress,\r\n            contactName: orderData.contactName,\r\n            contactPhone: orderData.contactPhone,\r\n            deliveryAddress: orderData.deliveryAddress,\r\n            orderItems: orderData.orderItems,\r\n            createTime: Date.now(),\r\n            updateTime: Date.now()\r\n        }\r\n        \r\n        // 保存到localStorage\r\n        this.saveOrderToStorage(order)\r\n        \r\n        console.log('Mock API - 创建订单成功:', order)\r\n        return order\r\n    },\r\n    \r\n    /**\r\n     * 获取用户订单列表\r\n     * @param {string} userId 用户ID\r\n     * @returns {Array} 用户订单列表\r\n     */\r\n    getUserOrders(userId) {\r\n        // 从localStorage获取所有订单\r\n        const allOrders = this.getAllOrdersFromStorage()\r\n        \r\n        // 过滤出当前用户的订单\r\n        const userOrders = allOrders.filter(order => order.userId === userId)\r\n        \r\n        // 按创建时间倒序排序\r\n        userOrders.sort((a, b) => b.createTime - a.createTime)\r\n        \r\n        console.log('Mock API - 获取用户订单:', userOrders.length, '条记录')\r\n        return userOrders\r\n    },\r\n    \r\n    /**\r\n     * 获取订单详情\r\n     * @param {string} orderId 订单ID\r\n     * @returns {Object|null} 订单详情\r\n     */\r\n    getOrderById(orderId) {\r\n        // 从localStorage获取所有订单\r\n        const allOrders = this.getAllOrdersFromStorage()\r\n        \r\n        // 查找指定订单\r\n        const order = allOrders.find(order => order.orderId === orderId)\r\n        \r\n        console.log('Mock API - 获取订单详情:', order ? '成功' : '未找到')\r\n        return order || null\r\n    },\r\n    \r\n    /**\r\n     * 取消订单\r\n     * @param {string} orderId 订单ID\r\n     * @returns {boolean} 操作结果\r\n     */\r\n    cancelOrder(orderId) {\r\n        // 从localStorage获取所有订单\r\n        const allOrders = this.getAllOrdersFromStorage()\r\n        \r\n        // 查找指定订单索引\r\n        const orderIndex = allOrders.findIndex(order => order.orderId === orderId)\r\n        \r\n        if (orderIndex !== -1) {\r\n            // 更新订单状态\r\n            allOrders[orderIndex].orderStatus = 'cancelled'\r\n            allOrders[orderIndex].updateTime = Date.now()\r\n            \r\n            // 保存更新后的订单列表\r\n            this.saveAllOrdersToStorage(allOrders)\r\n            \r\n            console.log('Mock API - 取消订单成功:', orderId)\r\n            return true\r\n        }\r\n        \r\n        console.log('Mock API - 取消订单失败: 订单不存在', orderId)\r\n        return false\r\n    },\r\n    \r\n    /**\r\n     * 删除订单\r\n     * @param {string} orderId 订单ID\r\n     * @returns {boolean} 操作结果\r\n     */\r\n    deleteOrder(orderId) {\r\n        // 从localStorage获取所有订单\r\n        const allOrders = this.getAllOrdersFromStorage()\r\n        \r\n        // 查找指定订单索引\r\n        const orderIndex = allOrders.findIndex(order => order.orderId === orderId)\r\n        \r\n        if (orderIndex !== -1) {\r\n            // 从数组中移除订单\r\n            allOrders.splice(orderIndex, 1)\r\n            \r\n            // 保存更新后的订单列表\r\n            this.saveAllOrdersToStorage(allOrders)\r\n            \r\n            console.log('Mock API - 删除订单成功:', orderId)\r\n            return true\r\n        }\r\n        \r\n        console.log('Mock API - 删除订单失败: 订单不存在', orderId)\r\n        return false\r\n    },\r\n    \r\n    /**\r\n     * 将订单保存到localStorage\r\n     * @param {Object} order 订单对象\r\n     */\r\n    saveOrderToStorage(order) {\r\n        // 获取现有订单列表\r\n        const orders = this.getAllOrdersFromStorage()\r\n        \r\n        // 添加新订单\r\n        orders.push(order)\r\n        \r\n        // 保存到localStorage\r\n        this.saveAllOrdersToStorage(orders)\r\n    },\r\n    \r\n    /**\r\n     * 从localStorage获取所有订单\r\n     * @returns {Array} 订单列表\r\n     */\r\n    getAllOrdersFromStorage() {\r\n        try {\r\n            const ordersStr = localStorage.getItem('milkstore_orders')\r\n            return ordersStr ? JSON.parse(ordersStr) : []\r\n        } catch (error) {\r\n            console.error('解析订单数据失败:', error)\r\n            return []\r\n        }\r\n    },\r\n    \r\n    /**\r\n     * 将所有订单保存到localStorage\r\n     * @param {Array} orders 订单列表\r\n     */\r\n    saveAllOrdersToStorage(orders) {\r\n        try {\r\n            localStorage.setItem('milkstore_orders', JSON.stringify(orders))\r\n        } catch (error) {\r\n            console.error('保存订单数据失败:', error)\r\n        }\r\n    },\r\n    \r\n    /**\r\n     * 根据orderId支付订单（修改状态为 paid）\r\n     * @param {string} orderId 订单ID\r\n     * @returns {boolean} 操作结果\r\n     */\r\n    payOrder(orderId) {\r\n        // 从localStorage获取所有订单\r\n        const allOrders = this.getAllOrdersFromStorage()\r\n        \r\n        // 查找指定订单索引\r\n        const orderIndex = allOrders.findIndex(order => order.orderId === orderId)\r\n        \r\n        if (orderIndex !== -1) {\r\n            // 更新订单状态\r\n            allOrders[orderIndex].orderStatus = 'paid'\r\n            allOrders[orderIndex].updateTime = Date.now()\r\n            allOrders[orderIndex].payTime = Date.now()\r\n            \r\n            // 保存更新后的订单列表\r\n            this.saveAllOrdersToStorage(allOrders)\r\n            \r\n            console.log('Mock API - 支付订单成功:', orderId)\r\n            return true\r\n        }\r\n        \r\n        console.log('Mock API - 支付订单失败: 订单不存在', orderId)\r\n        return false\r\n    },\r\n    \r\n    /**\r\n     * 完成订单（修改状态为 completed）\r\n     * @param {string} orderId 订单ID\r\n     * @returns {boolean} 操作结果\r\n     */\r\n    completeOrder(orderId) {\r\n        // 从localStorage获取所有订单\r\n        const allOrders = this.getAllOrdersFromStorage()\r\n        \r\n        // 查找指定订单索引\r\n        const orderIndex = allOrders.findIndex(order => order.orderId === orderId)\r\n        \r\n        if (orderIndex !== -1) {\r\n            // 更新订单状态\r\n            allOrders[orderIndex].orderStatus = 'completed'\r\n            allOrders[orderIndex].updateTime = Date.now()\r\n            allOrders[orderIndex].completeTime = Date.now()\r\n            \r\n            // 保存更新后的订单列表\r\n            this.saveAllOrdersToStorage(allOrders)\r\n            \r\n            console.log('Mock API - 完成订单成功:', orderId)\r\n            return true\r\n        }\r\n        \r\n        console.log('Mock API - 完成订单失败: 订单不存在', orderId)\r\n        return false\r\n    }\r\n} "],"names":["uni","order"],"mappings":"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"}